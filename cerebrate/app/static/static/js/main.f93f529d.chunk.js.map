{"version":3,"sources":["TagUtils.js","SelectTagsInput.js","AsyncUtils.js","Guy.js","ReplaySelector.js","SelectPlayerAndOpponentInput.js","DateUtils.js","ReplayDateFormGroup.js","SubmitReplayForm.js","CerebrateNavbar.js","ReplayTagTree.js","SortOptions.js","TagsFilter.js","ReplayDateFilter.js","ReplayFilterAndSort.js","FindReplays.js","App.js","serviceWorker.js","index.js"],"names":["TAG_PREFIXES","TAG_INTENTS","Intent","SUCCESS","DANGER","PRIMARY","TagUtils","tag","prefix","indexOf","slice","length","i","SelectTagsInput","props","fill","disabled","tagIntent","suggestTags","selectedTags","onTagsSelected","tagPrefix","other","createNewItemRenderer","query","active","handleClick","onClick","text","key","itemRenderer","item","modifiers","matchesPredicate","itemPredicate","index","exactMatch","includes","toLocaleLowerCase","initialContent","items","selectedItems","filter","createNewItemFromQuery","onItemSelect","push","resetOnSelect","tagRenderer","tagInputProps","onRemove","valueAsString","value","splice","tagProps","intent","openOnKeyDown","placeholder","AsyncUtils","sleep","ms","a","Promise","resolve","setTimeout","EXAMPLE_TAGS","debugFunc","args","console","log","selectReplayDebugFunc","replayId","Guy","onReplayLoadedListeners","forEach","listener","onReplayLoaded","replayTimestamp","teams","playerTeam","opponentTeam","replayFileName","notes","force","selectMostRecentReplayDebugFunc","Math","floor","Date","now","selectPlayerOpponentDebugFunc","updateReplayInfoDebugFunc","onReplayUpdatedListeners","onReplayUpdated","success","findReplaysDebugFunc","payload","includeTags","excludeTags","replays","tagFrequencyTable","map","frequency","selectReplay","self","selectMostRecentReplay","selectPlayerOpponent","updateReplayInfo","findReplays","window","replayLoaded","replayUpdated","ReplaySelector","state","valid","this","setReplayId","setReplayFileName","setReplayData","resetAndDisableForm","className","onInputChange","event","path","target","files","file","setState","split","pop","getFilename","hashReader","FileReader","addEventListener","data","result","hash","CryptoJS","SHA256","lib","WordArray","create","toString","dataReader","replayData","readAsDataURL","readAsArrayBuffer","inputProps","accept","React","Component","SelectPlayerAndOpponentInput","setPlayerTeam","setOpponentTeam","disableForm","choice","parseInt","currentTarget","inverseChoice","formDisabled","label","iconProps","options","concat","team","onChange","onPlayerSelected","onOpponentSelected","DateUtils","timestamp","date","toLocaleDateString","toLocaleTimeString","ReplayDateFormGroup","SubmitReplayForm","replaySelectedTags","submittingReplay","setNotes","setReplaySelectedTags","failedToTagReplay","failedToLoadReplay","helperText","loading","icon","IconNames","TAG","CerebrateNavbar","navbarTabId","Group","Heading","NodeType","ROOT","REPLAY_FOLDER","REPLAY","LOADING","ReplayTagTree","generateReplayFolderChildNodes","replay","id","nodeType","DOCUMENT","Classes","TREE_NODE_ICON","substring","join","secondaryLabel","generateTagOrRootChildNodes","filterTags","FOLDER_OPEN","childNodes","tagInfo","handleNodeCollapse","nodeData","isExpanded","handleNodeExpand","handleTagNodeExpand","rootNodeReplays","rootNodeTagFrequencyTable","contents","LIST_COLUMNS","onNodeExpand","onNodeCollapse","SortFormGroup","formGroupLabel","selectOptions","selectValue","sortDescending","setSortDescending","contentClassName","checked","innerLabel","innerLabelChecked","SortOptions","sortReplaysDescending","sortTagsDescending","vertical","TagsFilter","title","ReplayDateFilter","filterReplaysByDate","setFilterReplaysByDate","useState","selectedShortcutIndex","setSelectedShortcutIndex","style","display","maxDate","singleMonthOnly","timePickerProps","autoFocus","precision","TimePrecision","MINUTE","defaultValue","allowSingleDayRange","setHours","onShortcutChange","shortcut","ReplayFilterAndSort","setIncludeTags","setExcludeTags","FindReplays","resultsCounter","setSortReplaysDescending","setSortTagsDescending","all","SEARCH","SKELETON","App","entry","interactive","elevation","Elevation","TWO","animate","large","selectedTabId","newTabId","panel","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f93f529d.chunk.js","sourcesContent":["import { Intent } from \"@blueprintjs/core\";\n\nconst TAG_PREFIXES = [\"player\", \"opponent\", \"game\"];\n\nconst PREFIX_DELEMITER = \":\";\n\nconst TAG_INTENTS = [Intent.SUCCESS, Intent.DANGER, Intent.PRIMARY];\n\nexport const TagUtils = {\n  extractPrefix(tag) {\n    for (const prefix of TAG_PREFIXES) {\n      if (tag.indexOf(prefix) === 0) {\n        return prefix;\n      }\n    }\n\n    return null;\n  },\n\n  removePrefix(tag) {\n    for (const prefix of TAG_PREFIXES) {\n      if (tag.indexOf(prefix) !== 0) {\n        continue;\n      }\n\n      return tag.slice(prefix.length + PREFIX_DELEMITER.length);\n    }\n  },\n\n  getTagIntent(tag) {\n    for (let i = 0; i < TAG_PREFIXES.length && TAG_INTENTS.length; i++) {\n      if (tag.indexOf(TAG_PREFIXES[i]) === 0) {\n        return TAG_INTENTS[i];\n      }\n    }\n\n    return null;\n  },\n};\n","import React from \"react\";\nimport { MenuItem } from \"@blueprintjs/core\";\nimport { MultiSelect } from \"@blueprintjs/select\";\n\nimport { TagUtils } from \"./TagUtils\";\n\nfunction SelectTagsInput(props) {\n  const {\n    fill,\n    disabled,\n    tagIntent,\n    suggestTags,\n    selectedTags,\n    onTagsSelected,\n    tagPrefix,\n    ...other\n  } = props;\n\n  return (\n    <MultiSelect\n      createNewItemRenderer={(query, active, handleClick) => {\n        return (\n          <MenuItem\n            active={active}\n            onClick={handleClick}\n            text={query}\n            key={query}\n          />\n        );\n      }}\n      itemRenderer={(item, { modifiers, handleClick }) => {\n        if (!modifiers.matchesPredicate) {\n          return null;\n        }\n\n        return (\n          <MenuItem\n            active={modifiers.active}\n            onClick={handleClick}\n            text={TagUtils.removePrefix(item)}\n            key={item}\n          />\n        );\n      }}\n      itemPredicate={(query, item, index, exactMatch) =>\n        item.indexOf(tagPrefix) === 0 &&\n        !selectedTags.includes(item) &&\n        item.includes(query.toLocaleLowerCase(\"en-GB\"))\n      }\n      initialContent={null}\n      items={suggestTags}\n      selectedItems={selectedTags.filter((tag) => tag.indexOf(tagPrefix) === 0)}\n      createNewItemFromQuery={(query) => tagPrefix + query}\n      onItemSelect={(item) => {\n        if (!selectedTags.includes(item)) {\n          selectedTags.push(item);\n          onTagsSelected(selectedTags);\n        }\n      }}\n      resetOnSelect={true}\n      tagRenderer={(item) => TagUtils.removePrefix(item)}\n      tagInputProps={{\n        disabled: disabled,\n        onRemove: (valueAsString, index, value) => {\n          selectedTags.splice(\n            selectedTags.indexOf(tagPrefix + valueAsString),\n            1\n          );\n          onTagsSelected(selectedTags);\n        },\n        tagProps: { intent: tagIntent },\n      }}\n      openOnKeyDown={true}\n      fill={fill}\n      placeholder={\"Tags...\"}\n      {...other}\n    />\n  );\n}\n\nexport default SelectTagsInput;\n","export const AsyncUtils = {\n  sleep: async (ms) => await new Promise((resolve) => setTimeout(resolve, ms)),\n};\n","/* eslint-disable no-restricted-globals */\n\nimport { AsyncUtils } from \"./AsyncUtils\";\n\nconst EXAMPLE_TAGS = [\n  \"player:terran\",\n  \"player:protoss\",\n  \"player:zerg\",\n  \"player:macro\",\n  \"player:all_in\",\n  \"player:2_base_all_in\",\n  \"player:mech\",\n  \"player:bio\",\n  \"player:stargate\",\n  \"player:twilight\",\n  \"player:dt\",\n  \"player:mass_pheonix\",\n  \"player:mass_void_ray\",\n  \"player:air_toss\",\n  \"player:cannon_rush\",\n  \"player:proxy_barracks\",\n  \"player:proxy_hatch\",\n  \"player:win\",\n  \"player:loss\",\n\n  \"opponent:terran\",\n  \"opponent:protoss\",\n  \"opponent:zerg\",\n  \"opponent:macro\",\n  \"opponent:all_in\",\n  \"opponent:2_base_all_in\",\n  \"opponent:mech\",\n  \"opponent:bio\",\n  \"opponent:stargate\",\n  \"opponent:twilight\",\n  \"opponent:dt\",\n  \"opponent:mass_pheonix\",\n  \"opponent:mass_void_ray\",\n  \"opponent:air_toss\",\n  \"opponent:cannon_rush\",\n  \"opponent:proxy_barracks\",\n  \"opponent:proxy_hatch\",\n  \"opponent:win\",\n  \"opponent:loss\",\n\n  \"game:zvp\",\n  \"game:zvt\",\n  \"game:zvz\",\n  \"game:tvz\",\n  \"game:tvp\",\n  \"game:tvt\",\n  \"game:pvt\",\n  \"game:pvz\",\n  \"game:pvp\",\n  \"game:short\",\n  \"game:long\",\n  \"game:basetrade\",\n];\n\nconst debugFunc = (...args) => console.log(args);\n\nconst selectReplayDebugFunc = async (...args) => {\n  debugFunc(args);\n\n  if (args.length < 1) {\n    return;\n  }\n\n  await AsyncUtils.sleep(200);\n\n  const { replayId } = args[0];\n\n  Guy.onReplayLoadedListeners.forEach((listener) =>\n    listener.onReplayLoaded({\n      replayId: replayId,\n      replayTimestamp: 1575909015,\n      teams: [\"BobTheZealot\", \"Jim Raynor\"],\n      playerTeam: null,\n      opponentTeam: null,\n      replayFileName: null,\n      selectedTags: [\"game:fake_tag\"],\n      notes: \"Some fake notes\",\n      force: false,\n    })\n  );\n};\n\nconst selectMostRecentReplayDebugFunc = async (...args) => {\n  debugFunc(args);\n\n  await AsyncUtils.sleep(200);\n\n  Guy.onReplayLoadedListeners.forEach((listener) =>\n    listener.onReplayLoaded({\n      replayId: \"SOME HASH VALUE\",\n      replayTimestamp: Math.floor(Date.now() / 1000),\n      teams: [\"Tassadar\", \"Artanis\"],\n      playerTeam: null,\n      opponentTeam: null,\n      replayFileName: null,\n      selectedTags: [\"game:fake_tag_2\"],\n      notes: \"This is the most recently played replay\",\n      force: true,\n    })\n  );\n};\n\nconst selectPlayerOpponentDebugFunc = async (...args) => {\n  debugFunc(args);\n\n  if (args.length < 1) {\n    return;\n  }\n\n  await AsyncUtils.sleep(200);\n\n  const { replayId, playerTeam, opponentTeam } = args[0];\n\n  Guy.onReplayLoadedListeners.forEach((listener) =>\n    listener.onReplayLoaded({\n      replayId: replayId,\n      replayTimestamp: 1575909015,\n      teams: [\"BobTheZealot\", \"JimRaynor\"],\n      playerTeam: playerTeam,\n      opponentTeam: opponentTeam,\n      replayFileName: null,\n      selectedTags: [\"game:fake_tag\"],\n      notes: \"Some fake notes\",\n      force: false,\n    })\n  );\n};\n\nconst updateReplayInfoDebugFunc = async (...args) => {\n  debugFunc(args);\n\n  if (args.length < 1) {\n    return;\n  }\n\n  const { replayId } = args[0];\n\n  await AsyncUtils.sleep(500);\n\n  Guy.onReplayUpdatedListeners.forEach((listener) =>\n    listener.onReplayUpdated({\n      success: true,\n      replayId: replayId,\n    })\n  );\n};\n\nconst findReplaysDebugFunc = async (...args) => {\n  debugFunc(args);\n\n  if (args.length < 1) {\n    return;\n  }\n\n  const payload = args[0];\n  const includeTags = payload.includeTags || [];\n  const excludeTags = payload.excludeTags || [];\n\n  return {\n    replays: [\n      {\n        replayId: \"f91abca15806c6038f9b4af454af40d6dd32\",\n        replayTimestamp: 1602931843,\n        teams: [\"BobTheZealot\", \"JimRaynor\"],\n        notes: \"A truly great game between the two titans of StarCraft\",\n      },\n      {\n        replayId: \"540a1430ffe4d73f7c2c9d87cd2e4907b419\",\n        replayTimestamp: 1585730727,\n        teams: [\"Tassadar\", \"JimRaynor\"],\n        notes:\n          \"An unfortunate disagreement between friends led to this bar fight\",\n      },\n      {\n        replayId: \"ab6ee43405077302a6a9fc3f1ceaf6aae6fc\",\n        replayTimestamp: 1322166082,\n        teams: [\"BobTheZealot\", \"Tassadar\"],\n        notes: \"An awful match\",\n      },\n      {\n        replayId: \"48df54843f16afea0b8b92aa167de0e31912\",\n        replayTimestamp: 1471426714,\n        teams: [\"Tassadar\", \"BobTheZealot\"],\n        notes: \"Very BM\",\n      },\n      {\n        replayId: \"391b6c73cae67daaa1306c5ef5cad275bd29\",\n        replayTimestamp: 1398404675,\n        teams: [\"Tassadar\", \"Artanis\"],\n        notes:\n          \"The quick brown fox jumps over the lazy dog. Abcdefghijklm nopqrs t uvwxy z\",\n      },\n      {\n        replayId: \"03afb9220f1eee91ed3cdcf862446bfb1002\",\n        replayTimestamp: 1435622178,\n        teams: [\"Artanis\", \"BobTheZealot\"],\n        notes: \"\",\n      },\n    ],\n\n    tagFrequencyTable: EXAMPLE_TAGS.filter(\n      (tag) => !includeTags.includes(tag) && !excludeTags.includes(tag)\n    ).map((tag) => ({\n      tag: tag,\n      frequency: 1,\n    })),\n  };\n};\n\nexport const Guy = {\n  selectReplay: (...args) =>\n    ((self && self.selectReplay) || selectReplayDebugFunc)(...args),\n\n  selectMostRecentReplay: (...args) =>\n    ((self && self.selectMostRecentReplay) || selectMostRecentReplayDebugFunc)(\n      ...args\n    ),\n\n  selectPlayerOpponent: (...args) =>\n    ((self && self.selectPlayerOpponent) || selectPlayerOpponentDebugFunc)(\n      ...args\n    ),\n\n  updateReplayInfo: (...args) =>\n    ((self && self.updateReplayInfo) || updateReplayInfoDebugFunc)(...args),\n\n  findReplays: (...args) =>\n    ((self && self.findReplays) || findReplaysDebugFunc)(...args),\n\n  onReplayLoadedListeners: [],\n  onReplayUpdatedListeners: [],\n};\n\nwindow.replayLoaded = async (payload) => {\n  Guy.onReplayLoadedListeners.forEach((listener) =>\n    listener.onReplayLoaded(payload)\n  );\n};\n\n// eslint-disable-next-line no-restricted-globals\nwindow.replayUpdated = async (payload) => {\n  await AsyncUtils.sleep(500);\n  Guy.onReplayUpdatedListeners.forEach((listener) =>\n    listener.onReplayUpdated(payload)\n  );\n};\n","import React from \"react\";\nimport { Button, FileInput } from \"@blueprintjs/core\";\nimport CryptoJS from \"crypto-js/crypto-js\";\nimport \"crypto-js/lib-typedarrays\";\nimport { Guy } from \"./Guy\";\n\nimport \"./ReplaySelector.css\";\n\nconst REPLAY_FILE_PLACEHOLDER_TEXT = \"Choose replay file...\";\n\nconst getFilename = (path) => path.split(\"\\\\\").pop().split(\"/\").pop();\n\nclass ReplaySelector extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      valid: true,\n      disabled: false,\n    };\n  }\n\n  render() {\n    const {\n      replayFileName,\n      setReplayId,\n      setReplayFileName,\n      setReplayData,\n      resetAndDisableForm,\n      ...other\n    } = this.props;\n\n    return (\n      <div className={\"ReplaySelector-container\"}>\n        <FileInput\n          disabled={this.state.disabled}\n          text={replayFileName || REPLAY_FILE_PLACEHOLDER_TEXT}\n          onInputChange={(event) => {\n            const path = event.target.value;\n            if (!path || !event.target.files) {\n              return;\n            }\n\n            const file = event.target.files[0];\n\n            this.setState({ disabled: true });\n            setReplayFileName(getFilename(path));\n            resetAndDisableForm();\n\n            const hashReader = new FileReader();\n            hashReader.addEventListener(\"load\", (event) => {\n              const data = event.target.result;\n              const hash = CryptoJS.SHA256(\n                CryptoJS.lib.WordArray.create(data)\n              ).toString();\n              setReplayId(hash);\n\n              const dataReader = new FileReader();\n              dataReader.addEventListener(\"load\", (event) => {\n                const data = event.target.result;\n                setReplayData(data);\n\n                this.setState({ disabled: false });\n                Guy.selectReplay({ replayId: hash, replayData: data });\n              });\n              dataReader.readAsDataURL(file);\n            });\n            hashReader.readAsArrayBuffer(file);\n          }}\n          inputProps={{ accept: \".sc2replay\" }}\n          {...other}\n        />\n        <Button\n          className={\"ReplaySelector-button\"}\n          text={\"Most recent replay\"}\n          onClick={(event) => {\n            resetAndDisableForm();\n            Guy.selectMostRecentReplay();\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default ReplaySelector;\n","import React from \"react\";\nimport { FormGroup, HTMLSelect, Intent } from \"@blueprintjs/core\";\n\nimport \"./SelectPlayerandOpponentInput.css\";\n\nimport { Guy } from \"./Guy\";\n\nclass SelectPlayerAndOpponentInput extends React.Component {\n  onPlayerSelected(event) {\n    let {\n      replayId,\n      teams,\n      setPlayerTeam,\n      setOpponentTeam,\n      disableForm,\n    } = this.props;\n    let choice = parseInt(event.currentTarget.value);\n    if (choice < 0) {\n      setPlayerTeam(null);\n      return;\n    }\n\n    setPlayerTeam(choice);\n    let playerTeam = choice;\n\n    let opponentTeam = null;\n    if (teams.length === 2) {\n      let inverseChoice = choice === 0 ? 1 : 0;\n      setOpponentTeam(inverseChoice);\n      opponentTeam = inverseChoice;\n    }\n\n    disableForm();\n\n    Guy.selectPlayerOpponent({\n      replayId: replayId,\n      playerTeam: playerTeam,\n      opponentTeam: opponentTeam,\n    });\n  }\n\n  onOpponentSelected(event) {\n    let {\n      replayId,\n      teams,\n      setPlayerTeam,\n      setOpponentTeam,\n      disableForm,\n    } = this.props;\n    let choice = parseInt(event.currentTarget.value);\n    if (choice < 0) {\n      setOpponentTeam(null);\n      return;\n    }\n\n    setOpponentTeam(choice);\n    let opponentTeam = choice;\n\n    let playerTeam = null;\n    if (teams.length === 2) {\n      let inverseChoice = choice === 0 ? 1 : 0;\n      setPlayerTeam(inverseChoice);\n      playerTeam = inverseChoice;\n    }\n\n    disableForm();\n\n    Guy.selectPlayerOpponent({\n      replayId: replayId,\n      playerTeam: playerTeam,\n      opponentTeam: opponentTeam,\n    });\n  }\n\n  render() {\n    let { formDisabled, teams, playerTeam, opponentTeam } = this.props;\n    return (\n      <div className={\"SelectPlayerAndOpponentInput-container\"}>\n        <FormGroup\n          className={\n            \"SelectPlayerAndOpponentInput-form-group SelectPlayerAndOpponentInput-form-group-player\"\n          }\n          label={\"Player\"}\n        >\n          <HTMLSelect\n            disabled={formDisabled}\n            fill={true}\n            iconProps={{ intent: Intent.SUCCESS }}\n            options={[{ label: \"Choose player...\", value: \"-1\" }].concat(\n              teams.map((team, index) => {\n                return { label: team, value: index.toString() };\n              })\n            )}\n            value={playerTeam !== null ? playerTeam.toString() : \"-1\"}\n            onChange={(event) => this.onPlayerSelected(event)}\n          />\n        </FormGroup>\n        <FormGroup\n          className={\"SelectPlayerAndOpponentInput-form-group\"}\n          label={\"Opponent\"}\n        >\n          <HTMLSelect\n            disabled={formDisabled}\n            fill={true}\n            iconProps={{ intent: Intent.DANGER }}\n            options={[{ label: \"Choose opponent...\", value: \"-1\" }].concat(\n              teams.map((team, index) => {\n                return { label: team, value: index.toString() };\n              })\n            )}\n            value={opponentTeam !== null ? opponentTeam.toString() : \"-1\"}\n            onChange={(event) => this.onOpponentSelected(event)}\n          />\n        </FormGroup>\n      </div>\n    );\n  }\n}\n\nexport default SelectPlayerAndOpponentInput;\n","export const DateUtils = {\n  formatDate: (timestamp) => {\n    let date = new Date(timestamp * 1000);\n    return date.toLocaleDateString() + \" \" + date.toLocaleTimeString();\n  },\n};\n","import React from \"react\";\nimport { FormGroup, InputGroup } from \"@blueprintjs/core\";\nimport { DateUtils } from \"./DateUtils\";\n\nclass ReplayDateFormGroup extends React.Component {\n  render() {\n    let { replayTimestamp } = this.props;\n    return (\n      <FormGroup label=\"Replay date\">\n        <InputGroup\n          disabled={true}\n          fill={true}\n          value={replayTimestamp && DateUtils.formatDate(replayTimestamp)}\n        />\n      </FormGroup>\n    );\n  }\n}\n\nexport default ReplayDateFormGroup;\n","import React from \"react\";\n\nimport {\n  Button,\n  FormGroup,\n  InputGroup,\n  Intent,\n  TextArea,\n} from \"@blueprintjs/core\";\n\nimport { IconNames } from \"@blueprintjs/icons\";\n\nimport SelectTagsInput from \"./SelectTagsInput\";\nimport ReplaySelector from \"./ReplaySelector\";\nimport SelectPlayerAndOpponentInput from \"./SelectPlayerAndOpponentInput\";\nimport ReplayDateFormGroup from \"./ReplayDateFormGroup\";\n\nexport function SubmitReplayForm(props) {\n  const {\n    notes,\n    replaySelectedTags,\n    submittingReplay,\n    setNotes,\n    updateReplayInfo,\n    setReplaySelectedTags,\n    ...other\n  } = props;\n  const {\n    replayId,\n    formDisabled,\n    playerTeam,\n    opponentTeam,\n    failedToTagReplay,\n    failedToLoadReplay,\n  } = other;\n  return (\n    <div>\n      <br />\n      <FormGroup label=\"Replay ID\">\n        <InputGroup disabled={true} fill={true} value={replayId} />\n      </FormGroup>\n      <FormGroup\n        label=\"Replay file\"\n        intent={failedToLoadReplay ? Intent.DANGER : null}\n        helperText={\n          failedToLoadReplay\n            ? \"Failed to load replay, please select another or try again.\"\n            : null\n        }\n      >\n        <ReplaySelector fill={true} {...other} />\n      </FormGroup>\n      <ReplayDateFormGroup {...other} />\n      <SelectPlayerAndOpponentInput {...other} />\n      <FormGroup label=\"Player tags\">\n        <SelectTagsInput\n          {...other}\n          fill={true}\n          selectedTags={replaySelectedTags}\n          onTagsSelected={setReplaySelectedTags}\n          disabled={formDisabled || playerTeam === null}\n          tagPrefix={\"player:\"}\n          tagIntent={Intent.SUCCESS}\n        />\n      </FormGroup>\n      <FormGroup label=\"Opponent tags\">\n        <SelectTagsInput\n          {...other}\n          fill={true}\n          selectedTags={replaySelectedTags}\n          onTagsSelected={setReplaySelectedTags}\n          disabled={formDisabled || opponentTeam === null}\n          tagPrefix={\"opponent:\"}\n          tagIntent={Intent.DANGER}\n        />\n      </FormGroup>\n      <FormGroup label=\"Game tags\">\n        <SelectTagsInput\n          {...other}\n          fill={true}\n          selectedTags={replaySelectedTags}\n          onTagsSelected={setReplaySelectedTags}\n          disabled={formDisabled}\n          tagPrefix={\"game:\"}\n          tagIntent={Intent.PRIMARY}\n        />\n      </FormGroup>\n      <FormGroup label=\"Notes\">\n        <TextArea\n          fill={true}\n          disabled={formDisabled}\n          value={notes}\n          onChange={(event) => setNotes(event.target.value)}\n        />\n      </FormGroup>\n      <FormGroup\n        intent={failedToTagReplay ? Intent.DANGER : null}\n        helperText={\n          failedToTagReplay\n            ? \"Failed to save tags, please select another replay or try again.\"\n            : null\n        }\n      >\n        <Button\n          fill={true}\n          loading={submittingReplay}\n          intent={Intent.SUCCESS}\n          disabled={\n            formDisabled || playerTeam === null || opponentTeam === null\n          }\n          onClick={updateReplayInfo}\n          icon={IconNames.TAG}\n        >\n          Save tags\n        </Button>\n      </FormGroup>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Navbar } from \"@blueprintjs/core\";\n\nimport \"./CerebrateNavbar.scss\";\n\nexport class CerebrateNavbar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      navbarTabId: \"Home\",\n    };\n  }\n\n  render() {\n    return (\n      <Navbar className={\"CerebrateNavbar-navbar\"}>\n        <Navbar.Group>\n          <Navbar.Heading className={\"CerebrateNavbar-navbar-heading\"}>\n            <div>\n              <div className={\"CerebrateNavbar-logo\"}>Cerebrate</div>\n              <em className={\"CerebrateNavbar-logo-subtitle\"}>\n                A StarCraft II Replay Manager\n              </em>\n            </div>\n          </Navbar.Heading>\n        </Navbar.Group>\n      </Navbar>\n    );\n  }\n}\n","import React from \"react\";\nimport { Classes, Icon, Tree } from \"@blueprintjs/core\";\nimport { IconNames } from \"@blueprintjs/icons\";\n\nimport { Guy } from \"./Guy\";\nimport { TagUtils } from \"./TagUtils\";\nimport { DateUtils } from \"./DateUtils\";\n\nimport \"./ReplayTagTree.scss\";\n\nconst NodeType = {\n  ROOT: \"root\",\n  REPLAY_FOLDER: \"replay_folder\",\n  REPLAY: \"replay\",\n  TAG: \"tag\",\n  LOADING: \"loading\",\n};\n\nexport class ReplayTagTree extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const { rootNodeReplays, rootNodeTagFrequencyTable } = props;\n    this.state = {\n      contents: [\n        {\n          id: 0,\n          nodeType: NodeType.ROOT,\n          filterTags: [],\n          icon: (\n            <Icon\n              icon={IconNames.LIST_COLUMNS}\n              className={Classes.TREE_NODE_ICON}\n            />\n          ),\n          label: (\n            <div className={\"ReplayTagTree-tree-node-label-root\"}>\n              <strong>Replay results</strong>\n            </div>\n          ),\n          isExpanded: true,\n          childNodes: this.generateTagOrRootChildNodes(\n            [],\n            rootNodeReplays,\n            rootNodeTagFrequencyTable\n          ),\n        },\n      ],\n    };\n  }\n\n  generateReplayFolderChildNodes = (replays) => {\n    return replays.map((replay, index) => ({\n      id: index + 1,\n      nodeType: NodeType.REPLAY,\n      replay: replay,\n      icon: (\n        <Icon icon={IconNames.DOCUMENT} className={Classes.TREE_NODE_ICON} />\n      ),\n      className: \"ReplayTagTree-tree-node\",\n      label: (\n        <div className={\"ReplayTagTree-tree-node-label-replay\"}>\n          <div className={\"ReplayTagTree-tree-node-label-replay-id\"}>\n            {replay.replayId.substring(0, 8)}\n          </div>\n          &nbsp;\n          <div className={\"ReplayTagTree-tree-node-label-replay-teams\"}>\n            {replay.teams.join(\" vs \")}\n          </div>\n          {replay.notes ? (\n            <div className={\"ReplayTagTree-tree-node-label-replay-notes\"}>\n              <em>{replay.notes}</em>\n            </div>\n          ) : null}\n        </div>\n      ),\n      secondaryLabel: (\n        <div className={\"ReplayTagTree-tree-node-secondary-label\"}>\n          <em>{DateUtils.formatDate(replay.replayTimestamp)}</em>\n        </div>\n      ),\n    }));\n  };\n\n  generateTagOrRootChildNodes = (filterTags, replays, tagFrequencyTable) => {\n    return [\n      {\n        id: 0,\n        nodeType: NodeType.REPLAY_FOLDER,\n        filterTags: filterTags,\n        icon: (\n          <Icon\n            icon={IconNames.FOLDER_OPEN}\n            className={Classes.TREE_NODE_ICON}\n          />\n        ),\n        label: \"Replays\",\n        childNodes: this.generateReplayFolderChildNodes(replays),\n      },\n    ].concat(\n      tagFrequencyTable.map((tagInfo, index) => ({\n        id: index + 1,\n        nodeType: NodeType.TAG,\n        filterTags: filterTags.concat(tagInfo.tag),\n        icon: (\n          <Icon\n            icon={IconNames.TAG}\n            intent={TagUtils.getTagIntent(tagInfo.tag)}\n            className={Classes.TREE_NODE_ICON}\n          />\n        ),\n        label: (\n          <div>\n            <span\n              className={\n                \"ReplayTagTree-tree-node-label-\" +\n                TagUtils.extractPrefix(tagInfo.tag) +\n                \"-tag\"\n              }\n            >\n              <span className=\"ReplayTagTree-tree-node-label-tag-prefix\">\n                {TagUtils.extractPrefix(tagInfo.tag)}:&nbsp;\n              </span>\n              <span className=\"ReplayTagTree-tree-node-label-tag-name\">\n                <strong>{TagUtils.removePrefix(tagInfo.tag)}</strong>\n              </span>\n            </span>\n          </div>\n        ),\n        secondaryLabel: (\n          <span className={\"ReplayTagTree-tree-node-secondary-label\"}>\n            <em>{\"Replay(s): \" + tagInfo.frequency} </em>\n          </span>\n        ),\n        childNodes: [\n          {\n            id: 0,\n            nodeType: NodeType.LOADING,\n            label: (\n              <span>\n                <em>Loading...</em>\n              </span>\n            ),\n            disabled: true,\n          },\n        ],\n      }))\n    );\n  };\n\n  handleNodeCollapse = (nodeData) => {\n    if (nodeData.nodeType == NodeType.ROOT) {\n      return;\n    }\n\n    nodeData.isExpanded = false;\n    this.setState(this.state);\n  };\n\n  handleNodeExpand = async (nodeData) => {\n    nodeData.isExpanded = true;\n    this.setState(this.state);\n\n    switch (nodeData.nodeType) {\n      case NodeType.TAG:\n        await this.handleTagNodeExpand(nodeData);\n        break;\n      default:\n        break;\n    }\n  };\n\n  handleTagNodeExpand = async (nodeData) => {\n    const { includeTags, excludeTags } = this.props;\n\n    const { replays, tagFrequencyTable } = await Guy.findReplays({\n      includeTags: includeTags.concat(nodeData.filterTags),\n      excludeTags: excludeTags,\n    });\n\n    nodeData.childNodes = this.generateTagOrRootChildNodes(\n      nodeData.filterTags,\n      replays,\n      tagFrequencyTable\n    );\n    this.setState(this.state);\n  };\n\n  render() {\n    return (\n      <Tree\n        {...this.props}\n        contents={this.state.contents}\n        onNodeExpand={this.handleNodeExpand}\n        onNodeCollapse={this.handleNodeCollapse}\n      />\n    );\n  }\n}\n","import {\n  Card,\n  ControlGroup,\n  FormGroup,\n  H5,\n  HTMLSelect,\n  Switch,\n} from \"@blueprintjs/core\";\nimport React from \"react\";\n\nfunction SortFormGroup(props) {\n  const {\n    formGroupLabel,\n    selectOptions,\n    selectValue,\n    sortDescending,\n    setSortDescending,\n  } = props;\n  return (\n    <FormGroup\n      className={\"ReplayFilterAndSort-sorting-form-group\"}\n      contentClassName={\"ReplayFilterAndSort-sorting-form-group-content\"}\n      label={formGroupLabel}\n    >\n      <HTMLSelect fill={true} options={selectOptions} value={selectValue} />\n      <Switch\n        className={\"ReplayFilterAndSort-sorting-descending-switch\"}\n        checked={sortDescending}\n        innerLabel=\"Ascending\"\n        innerLabelChecked=\"Descending\"\n        onChange={(event) => setSortDescending(event.currentTarget.checked)}\n      />\n    </FormGroup>\n  );\n}\n\nexport function SortOptions(props) {\n  const { sortReplaysDescending, sortTagsDescending } = props;\n\n  return (\n    <Card className={\"ReplayFilterAndSort-container\"}>\n      <H5 className={\"ReplayFilterAndSort-control-group-heading\"}>Sorting</H5>\n      <ControlGroup fill={true} vertical={false}>\n        <SortFormGroup\n          formGroupLabel={\"Sort replays by\"}\n          selectOptions={[{ label: \"Replay date\", value: \"date\" }]}\n          selectValue={\"date\"}\n          sortDescending={sortReplaysDescending}\n          setSortDescending={() => {}}\n        />\n        <SortFormGroup\n          formGroupLabel={\"Sort tags by\"}\n          selectOptions={[{ label: \"Tag frequency\", value: \"frequency\" }]}\n          selectValue={\"frequency\"}\n          sortDescending={sortTagsDescending}\n          setSortDescending={() => {}}\n        />\n      </ControlGroup>\n    </Card>\n  );\n}\n","import { Card, ControlGroup, FormGroup, H5, Intent } from \"@blueprintjs/core\";\nimport SelectTagsInput from \"./SelectTagsInput\";\nimport React from \"react\";\n\nexport function TagsFilter(props) {\n  const { className, selectedTags, onTagsSelected, title, ...other } = props;\n\n  return (\n    <Card className={`ReplayFilterAndSort-container ${className}`}>\n      <H5 className={\"ReplayFilterAndSort-control-group-heading\"}>{title}</H5>\n      <ControlGroup fill={true} vertical={false}>\n        <FormGroup\n          label=\"Player tags\"\n          className={\"ReplayFilterAndSort-select-tags-form-group\"}\n        >\n          <SelectTagsInput\n            selectedTags={selectedTags}\n            onTagsSelected={onTagsSelected}\n            tagPrefix={\"player:\"}\n            tagIntent={Intent.SUCCESS}\n            fill={true}\n            {...other}\n          />\n        </FormGroup>\n        <FormGroup\n          label=\"Opponent tags\"\n          className={\"ReplayFilterAndSort-select-tags-form-group\"}\n        >\n          <SelectTagsInput\n            selectedTags={selectedTags}\n            onTagsSelected={onTagsSelected}\n            tagPrefix={\"opponent:\"}\n            tagIntent={Intent.DANGER}\n            fill={true}\n            {...other}\n          />\n        </FormGroup>\n        <FormGroup\n          label=\"Game tags\"\n          className={\"ReplayFilterAndSort-select-tags-form-group\"}\n        >\n          <SelectTagsInput\n            selectedTags={selectedTags}\n            onTagsSelected={onTagsSelected}\n            tagPrefix={\"game:\"}\n            tagIntent={Intent.PRIMARY}\n            fill={true}\n            {...other}\n          />\n        </FormGroup>\n      </ControlGroup>\n    </Card>\n  );\n}\n","import { Card, FormGroup, H5, Switch } from \"@blueprintjs/core\";\nimport React, { useState } from \"react\";\n\nimport \"./ReplayDateFilter.css\";\nimport { DateRangePicker, TimePrecision } from \"@blueprintjs/datetime\";\n\nexport function ReplayDateFilter(props) {\n  const { filterReplaysByDate, setFilterReplaysByDate, ...other } = props;\n\n  const [selectedShortcutIndex, setSelectedShortcutIndex] = useState(0);\n\n  return (\n    <div>\n      <Card className={\"ReplayFilterAndSort-container\"}>\n        <H5 className={\"ReplayFilterAndSort-control-group-heading\"}>\n          Replay date\n        </H5>\n        <FormGroup\n          label=\"Filter by replay date\"\n          className={\"ReplayDateFilter-replay-date-form-group\"}\n        >\n          <Switch\n            checked={filterReplaysByDate}\n            innerLabel={\"Show all replays\"}\n            innerLabelChecked={\"Filter replays by date\"}\n            onChange={(event) =>\n              setFilterReplaysByDate(event.currentTarget.checked)\n            }\n          />\n        </FormGroup>\n        {filterReplaysByDate ? (\n          <FormGroup\n            label=\"Choose dates\"\n            className={\"ReplayDateFilter-replay-date-form-group\"}\n          >\n            <div style={{ display: \"inline-block\" }}>\n              <DateRangePicker\n                className={\"ReplayDateFilter-replay-date-range-picker\"}\n                maxDate={new Date()}\n                singleMonthOnly={true}\n                timePickerProps={{\n                  autoFocus: true,\n                  precision: TimePrecision.MINUTE,\n                  defaultValue: new Date(),\n                }}\n                allowSingleDayRange={true}\n                defaultValue={[\n                  new Date(new Date().setHours(0, 0, 0, 0)),\n                  new Date(),\n                ]}\n                selectedShortcutIndex={selectedShortcutIndex}\n                onShortcutChange={(shortcut, index) =>\n                  setSelectedShortcutIndex(index)\n                }\n                {...other}\n              />\n            </div>\n          </FormGroup>\n        ) : null}\n      </Card>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport \"./ReplayFilterAndSort.scss\";\nimport { SortOptions } from \"./SortOptions\";\nimport { TagsFilter } from \"./TagsFilter\";\nimport { ReplayDateFilter } from \"./ReplayDateFilter\";\n\nexport function ReplayFilterAndSort(props) {\n  const {\n    includeTags,\n    setIncludeTags,\n    excludeTags,\n    setExcludeTags,\n    ...other\n  } = props;\n\n  return (\n    <div>\n      <ReplayDateFilter {...other} />\n      <SortOptions {...other} />\n      <TagsFilter\n        className={\"ReplayFilterAndSort-container-include-tags\"}\n        title={\"Include tags\"}\n        selectedTags={includeTags}\n        onTagsSelected={setIncludeTags}\n        {...other}\n      />\n      <TagsFilter\n        className={\"ReplayFilterAndSort-container-exclude-tags\"}\n        title={\"Exclude tags\"}\n        selectedTags={excludeTags}\n        onTagsSelected={setExcludeTags}\n        {...other}\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { ReplayTagTree } from \"./ReplayTagTree\";\nimport { ReplayFilterAndSort } from \"./ReplayFilterAndSort\";\nimport { Button, Intent, Classes } from \"@blueprintjs/core\";\nimport { IconNames } from \"@blueprintjs/icons\";\n\nimport \"./FindReplays.css\";\nimport { AsyncUtils } from \"./AsyncUtils\";\nimport { Guy } from \"./Guy\";\n\nexport class FindReplays extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      resultsCounter: 0,\n\n      filterReplaysByDate: false,\n      setFilterReplaysByDate: (filterReplaysByDate) => {\n        this.setState({ filterReplaysByDate: filterReplaysByDate });\n      },\n\n      sortReplaysDescending: true,\n      setSortReplaysDescending: (sortReplaysDescending) => {\n        this.setState({\n          sortReplaysDescending: sortReplaysDescending,\n        });\n      },\n\n      sortTagsDescending: true,\n      setSortTagsDescending: (sortReplaysDescending) => {\n        this.setState({\n          sortReplaysDescending: sortReplaysDescending,\n        });\n      },\n\n      includeTags: [],\n      setIncludeTags: (includeTags) => {\n        this.setState({\n          includeTags: includeTags,\n        });\n      },\n\n      excludeTags: [],\n      setExcludeTags: (excludeTags) => {\n        this.setState({\n          excludeTags: excludeTags,\n        });\n      },\n\n      rootNodeReplays: [],\n      rootNodeTagFrequencyTable: [],\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <div className={\"FindReplays-filter-sort-container\"}>\n          <ReplayFilterAndSort {...this.props} {...this.state} />\n          <Button\n            fill={true}\n            intent={Intent.PRIMARY}\n            loading={this.state.loading}\n            onClick={() => {\n              this.setState({\n                loading: true,\n              });\n\n              (async () => {\n                const [{ replays, tagFrequencyTable }] = await Promise.all([\n                  Guy.findReplays({\n                    includeTags: this.state.includeTags,\n                    excludeTags: this.state.excludeTags,\n                  }),\n                  AsyncUtils.sleep(200),\n                ]);\n\n                this.setState({\n                  rootNodeReplays: replays,\n                  rootNodeTagFrequencyTable: tagFrequencyTable,\n                  loading: false,\n                  resultsCounter: this.state.resultsCounter + 1,\n                });\n              })();\n            }}\n            icon={IconNames.SEARCH}\n          >\n            Find replays\n          </Button>\n        </div>\n        {this.state.resultsCounter === 0 ? null : (\n          <ReplayTagTree\n            key={this.state.resultsCounter}\n            className={this.state.loading ? Classes.SKELETON : \"\"}\n            {...this.props}\n            {...this.state}\n          />\n        )}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.scss\";\nimport { SubmitReplayForm } from \"./SubmitReplayForm\";\nimport { Guy } from \"./Guy\";\nimport { CerebrateNavbar } from \"./CerebrateNavbar\";\nimport { Card, Elevation, Tab, Tabs } from \"@blueprintjs/core\";\nimport { FindReplays } from \"./FindReplays\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      replayId: \"\",\n      replayFileName: \"\",\n      replayTimestamp: null,\n      replayData: \"\",\n      teams: [],\n      playerTeam: null,\n      opponentTeam: null,\n      replaySelectedTags: [],\n      notes: \"\",\n      formDisabled: true,\n      failedToLoadReplay: false,\n      failedToTagReplay: false,\n      submittingReplay: false,\n      navbarTabId: \"form\",\n      suggestTags: [],\n\n      setReplayId: (replayId) => this.setState({ replayId: replayId }),\n\n      setReplayFileName: (replayFileName) =>\n        this.setState({ replayFileName: replayFileName }),\n\n      setReplayData: (replayData) => this.setState({ replayData: replayData }),\n\n      setPlayerTeam: (index) => this.setState({ playerTeam: index }),\n\n      setOpponentTeam: (index) => this.setState({ opponentTeam: index }),\n\n      setReplaySelectedTags: (replaySelectedTags) =>\n        this.setState({ replaySelectedTags: replaySelectedTags }),\n\n      setNotes: (notes) => this.setState({ notes: notes }),\n\n      resetAndDisableForm: () =>\n        this.setState({\n          failedToLoadReplay: false,\n          replayId: \"\",\n          replayTimestamp: null,\n          teams: [],\n          playerTeam: null,\n          opponentTeam: null,\n          replaySelectedTags: [],\n          notes: \"\",\n          formDisabled: true,\n        }),\n\n      disableForm: () => this.setState({ formDisabled: true }),\n\n      updateReplayInfo: () => {\n        this.setState({\n          formDisabled: true,\n          submittingReplay: true,\n        });\n        Guy.updateReplayInfo({\n          replayId: this.state.replayId,\n          replayData: this.state.replayData,\n          selectedTags: this.state.replaySelectedTags,\n          playerTeam: this.state.playerTeam,\n          opponentTeam: this.state.opponentTeam,\n          notes: this.state.notes,\n        });\n      },\n    };\n  }\n\n  componentDidMount() {\n    Guy.onReplayLoadedListeners.push(this);\n    Guy.onReplayUpdatedListeners.push(this);\n\n    (async () => {\n      const { tagFrequencyTable } = await Guy.findReplays({});\n      this.setState({\n        suggestTags: tagFrequencyTable.map((entry) => entry.tag),\n      });\n    })();\n  }\n\n  componentWillUnmount() {\n    Guy.onReplayLoadedListeners.splice(\n      Guy.onReplayLoadedListeners.indexOf(this),\n      1\n    );\n    Guy.onReplayUpdatedListeners.splice(\n      Guy.onReplayUpdatedListeners.indexOf(this),\n      1\n    );\n  }\n\n  onReplayLoaded({\n    replayId,\n    replayFileName,\n    replayData,\n    replayTimestamp,\n    teams,\n    playerTeam,\n    opponentTeam,\n    selectedTags,\n    notes,\n    force,\n  }) {\n    if (!force && this.state.replayId !== replayId) {\n      this.setState({\n        formDisabled: true,\n        submittingReplay: false,\n        failedToLoadReplay: true,\n        replayId: \"\",\n        teams: [],\n        playerTeam: null,\n        opponentTeam: null,\n        replayTimestamp: null,\n        replaySelectedTags: [],\n        notes: \"\",\n      });\n      return;\n    }\n\n    this.setState({\n      replayId: replayId,\n      replayData: replayData || this.state.replayData,\n      formDisabled: false,\n      submittingReplay: false,\n      failedToLoadReplay: false,\n      replayTimestamp: replayTimestamp,\n      teams: teams,\n      playerTeam: playerTeam,\n      opponentTeam: opponentTeam,\n      replayFileName: replayFileName || this.state.replayFileName,\n      replaySelectedTags: selectedTags,\n      notes: notes,\n    });\n  }\n\n  onReplayUpdated({ success, replayId }) {\n    this.setState({ submittingReplay: false });\n\n    if (this.state.replayId === replayId) {\n      this.setState({ failedToTagReplay: !success, formDisabled: false });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Card\n          interactive={true}\n          elevation={Elevation.TWO}\n          className={\"App-card\"}\n        >\n          <CerebrateNavbar />\n          <div className={\"App-break\"}>\n            <br />\n          </div>\n          <Tabs\n            animate={true}\n            id=\"navbar\"\n            large={true}\n            selectedTabId={this.state.navbarTabId}\n            onChange={(newTabId) => this.setState({ navbarTabId: newTabId })}\n          >\n            <Tab\n              id=\"form\"\n              title=\"Replay Details\"\n              panel={<SubmitReplayForm {...this.state} />}\n            />\n            <Tab\n              id=\"search\"\n              title=\"Find Replays\"\n              panel={<FindReplays {...this.state} />}\n            />\n          </Tabs>\n        </Card>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}