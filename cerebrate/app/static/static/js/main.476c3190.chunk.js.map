{"version":3,"sources":["TagUtils.js","SelectTagsInput.js","AsyncUtils.js","ExampleTags.js","Guy.js","ReplaySelector.js","SelectPlayerAndOpponentInput.js","DateUtils.js","ReplayDateFormGroup.js","SubmitReplayForm.js","CerebrateNavbar.js","ReplayTagTree.js","SortOptions.js","TagsFilter.js","ReplayDateFilter.js","ReplayFilterAndSort.js","ExportActionsCard.js","FindReplays.js","App.js","serviceWorker.js","index.js"],"names":["TAG_PREFIXES","TAG_INTENTS","Intent","SUCCESS","DANGER","PRIMARY","TagUtils","tag","prefix","indexOf","slice","length","i","SelectTagsInput","props","fill","disabled","tagIntent","suggestTags","selectedTags","onTagsSelected","tagPrefix","other","createNewItemRenderer","query","active","handleClick","onClick","text","key","itemRenderer","item","modifiers","matchesPredicate","itemPredicate","index","exactMatch","includes","toLocaleLowerCase","initialContent","items","selectedItems","filter","createNewItemFromQuery","onItemSelect","push","resetOnSelect","tagRenderer","tagInputProps","onRemove","valueAsString","value","splice","tagProps","intent","openOnKeyDown","placeholder","AsyncUtils","sleep","ms","a","Promise","resolve","setTimeout","PLAYER_AND_OPPONENT_TAG_NAMES","EXAMPLE_TAGS","map","tagName","concatExampleTags","tags","tagsSet","Set","concat","exampleTag","has","DEBUG_TAGS","debugFunc","args","console","log","selectReplayDebugFunc","replayId","force","Guy","onReplayLoadedListeners","forEach","listener","onReplayLoaded","replayTimestamp","teams","playerTeam","opponentTeam","replayFileName","notes","selectMostRecentReplayDebugFunc","Math","floor","Date","now","selectPlayerOpponentDebugFunc","updateReplayInfoDebugFunc","onReplayUpdatedListeners","onReplayUpdated","success","findReplaysDebugFunc","payload","includeTags","excludeTags","replays","tagFrequencyTable","frequency","exportReplaysToDirDebugFunc","exportReplaysToSc2ReplayStatsDebugFunc","replayIds","exportUrl","random","getScelightPathDebugFunc","selectScelightPathDebugFunc","getSc2ReplayStatsAuthKeyDebugFunc","selectReplay","self","selectMostRecentReplay","selectPlayerOpponent","updateReplayInfo","findReplays","forgetReplays","exportReplaysToTempDir","exportReplaysToTargetDir","exportReplaysToScelight","exportReplaysToSc2ReplayStats","openDirInFileManager","getScelightPath","selectScelightPath","getSc2ReplayStatsAuthKey","window","replayLoaded","replayUpdated","ReplaySelector","state","valid","this","setReplayId","setReplayFileName","setReplayData","resetAndDisableForm","className","onInputChange","event","path","target","files","file","setState","split","pop","getFilename","hashReader","FileReader","addEventListener","data","result","hash","CryptoJS","SHA256","lib","WordArray","create","toString","dataReader","replayData","readAsDataURL","readAsArrayBuffer","inputProps","accept","React","Component","SelectPlayerAndOpponentInput","setPlayerTeam","setOpponentTeam","disableForm","choice","parseInt","currentTarget","inverseChoice","formDisabled","label","iconProps","options","team","onChange","onPlayerSelected","onOpponentSelected","DateUtils","timestamp","date","toLocaleDateString","toLocaleTimeString","getTime","ReplayDateFormGroup","SubmitReplayForm","replaySelectedTags","submittingReplay","setNotes","setReplaySelectedTags","failedToTagReplay","failedToLoadReplay","helperText","loading","icon","IconNames","TAG","CerebrateNavbar","navbarTabId","Group","Heading","NodeType","ROOT","REPLAY_FOLDER","REPLAY","LOADING","ReplayTagTree","deselectNodes","nodes","nodeData","isSelected","childNodes","deselectAllNodes","contents","handleNodeClick","_","nodeType","handleNodeExpand","isExpanded","shiftKey","wasSelected","childNode","updateTagTree","handleNodeCollapse","handleTagNodeExpand","filterTags","generateTagOrRootChildNodes","onNodeClick","onNodeExpand","onNodeCollapse","generateReplayFolderChildNodes","replay","id","DOCUMENT","Classes","TREE_NODE_ICON","substring","join","secondaryLabel","FOLDER_OPEN","tagInfo","generateTagTreeContents","LIST_COLUMNS","getSelectedReplays","flat","forgetSelectedReplays","selectedReplayIds","forgetSelectedReplaysInner","SortFormGroup","formGroupLabel","selectOptions","selectValue","sortDescending","setSortDescending","contentClassName","defaultValue","checked","innerLabel","innerLabelChecked","SortOptions","sortReplaysDescending","sortTagsDescending","vertical","TagsFilter","title","ReplayDateFilter","filterReplaysByDate","setFilterReplaysByDate","filterDateRange","setFilterDateRange","useState","selectedShortcutIndex","setSelectedShortcutIndex","style","display","maxDate","singleMonthOnly","timePickerProps","autoFocus","precision","TimePrecision","MINUTE","allowSingleDayRange","onShortcutChange","shortcut","selectedDates","ReplayFilterAndSort","setIncludeTags","setExcludeTags","ExportToDirectoryButton","setLoading","setOutputPath","exportToDirectory","EXPORT","all","outputPath","ExportOutputPathFormGroup","leftElement","FOLDER_CLOSE","rightElement","DUPLICATE","navigator","clipboard","writeText","SHARE","dirPath","ExportOptionFragment","exportTarget","sc2ReplayStatsHelpOverlayOpen","setSc2ReplayStatsHelpOverlayOpen","sc2ReplayStatsExportedReplays","setSc2ReplayStatsExportedReplays","showSc2ReplayStatsAuthKey","setShowSc2ReplayStatsAuthKey","exportReplaysToTemporaryDirectory","exportReplaysToTargetDirectory","scelightPath","setScelightPath","exportSelectedReplaysToScelight","APPLICATION","DOCUMENT_OPEN","exportSelectedReplaysToSc2ReplayStats","sc2ReplayStatsAuthKey","setSc2ReplayStatsAuthKey","type","KEY","WARNING","minimal","HELP","exportedReplays","href","rel","isOpen","elevation","Elevation","FOUR","large","ARROW_RIGHT","round","DIALOG_FOOTER_ACTIONS","ExportActionsCard","exportOption","FindReplays","getSelectedReplayIds","tagTreeContents","resultsCounter","setHours","setSortReplaysDescending","setSortTagsDescending","setTagTreeContents","viewDetailsButtonLoading","isConfirmForgetAlertOpen","exportReplaysButtonLoading","setNavbarTabId","dateRange","startTimestamp","endTimestamp","SEARCH","SKELETON","selectedReplays","DELETE","cancelButtonText","confirmButtonText","canOutsideClickCancel","onCancel","onConfirm","WARNING_SIGN","authKey","App","entry","TWO","animate","selectedTabId","newTabId","panel","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.476c3190.chunk.js","sourcesContent":["import { Intent } from \"@blueprintjs/core\";\n\nconst TAG_PREFIXES = [\"player\", \"opponent\", \"game\"];\n\nconst PREFIX_DELEMITER = \":\";\n\nconst TAG_INTENTS = [Intent.SUCCESS, Intent.DANGER, Intent.PRIMARY];\n\nexport const TagUtils = {\n  extractPrefix(tag) {\n    for (const prefix of TAG_PREFIXES) {\n      if (tag.indexOf(prefix) === 0) {\n        return prefix;\n      }\n    }\n\n    return null;\n  },\n\n  removePrefix(tag) {\n    for (const prefix of TAG_PREFIXES) {\n      if (tag.indexOf(prefix) !== 0) {\n        continue;\n      }\n\n      return tag.slice(prefix.length + PREFIX_DELEMITER.length);\n    }\n  },\n\n  getTagIntent(tag) {\n    for (let i = 0; i < TAG_PREFIXES.length && TAG_INTENTS.length; i++) {\n      if (tag.indexOf(TAG_PREFIXES[i]) === 0) {\n        return TAG_INTENTS[i];\n      }\n    }\n\n    return null;\n  },\n};\n","import React from \"react\";\nimport { MenuItem } from \"@blueprintjs/core\";\nimport { MultiSelect } from \"@blueprintjs/select\";\n\nimport { TagUtils } from \"./TagUtils\";\n\nfunction SelectTagsInput(props) {\n  const {\n    fill,\n    disabled,\n    tagIntent,\n    suggestTags,\n    selectedTags,\n    onTagsSelected,\n    tagPrefix,\n    ...other\n  } = props;\n\n  return (\n    <MultiSelect\n      createNewItemRenderer={(query, active, handleClick) => {\n        return (\n          <MenuItem\n            active={active}\n            onClick={handleClick}\n            text={query}\n            key={query}\n          />\n        );\n      }}\n      itemRenderer={(item, { modifiers, handleClick }) => {\n        if (!modifiers.matchesPredicate) {\n          return null;\n        }\n\n        return (\n          <MenuItem\n            active={modifiers.active}\n            onClick={handleClick}\n            text={TagUtils.removePrefix(item)}\n            key={item}\n          />\n        );\n      }}\n      itemPredicate={(query, item, index, exactMatch) =>\n        item.indexOf(tagPrefix) === 0 &&\n        !selectedTags.includes(item) &&\n        item.includes(query.toLocaleLowerCase(\"en-GB\"))\n      }\n      initialContent={null}\n      items={suggestTags}\n      selectedItems={selectedTags.filter((tag) => tag.indexOf(tagPrefix) === 0)}\n      createNewItemFromQuery={(query) => tagPrefix + query}\n      onItemSelect={(item) => {\n        if (!selectedTags.includes(item)) {\n          selectedTags.push(item);\n          onTagsSelected(selectedTags);\n        }\n      }}\n      resetOnSelect={true}\n      tagRenderer={(item) => TagUtils.removePrefix(item)}\n      tagInputProps={{\n        disabled: disabled,\n        onRemove: (valueAsString, index, value) => {\n          selectedTags.splice(\n            selectedTags.indexOf(tagPrefix + valueAsString),\n            1\n          );\n          onTagsSelected(selectedTags);\n        },\n        tagProps: { intent: tagIntent },\n      }}\n      openOnKeyDown={true}\n      fill={fill}\n      placeholder={\"Tags...\"}\n      {...other}\n    />\n  );\n}\n\nexport default SelectTagsInput;\n","export const AsyncUtils = {\n  sleep: async (ms) => await new Promise((resolve) => setTimeout(resolve, ms)),\n};\n","const PLAYER_AND_OPPONENT_TAG_NAMES = [\n  \"macro\",\n  \"all_in\",\n  \"1_base_all_in\",\n  \"2_base_all_in\",\n  \"3_base_all_in\",\n  \"mech\",\n  \"bio\",\n  \"stargate\",\n  \"twilight\",\n  \"dt\",\n  \"swarm_host\",\n  \"battlecruiser\",\n  \"nydus\",\n  \"cannon_rush\",\n  \"proxy_barracks\",\n  \"proxy_hatch\",\n];\n\nconst GAME_TAG_NAMES = [\"macro\", \"basetrade\"];\n\nconst EXAMPLE_TAGS = [\n  ...PLAYER_AND_OPPONENT_TAG_NAMES.map((tagName) => `player:${tagName}`),\n  ...PLAYER_AND_OPPONENT_TAG_NAMES.map((tagName) => `opponent:${tagName}`),\n  ...GAME_TAG_NAMES.map((tagName) => `game:${tagName}`),\n];\n\nexport const concatExampleTags = (tags) => {\n  const tagsSet = new Set(tags);\n  return tags.concat(\n    EXAMPLE_TAGS.filter((exampleTag) => !tagsSet.has(exampleTag))\n  );\n};\n","/* eslint-disable no-restricted-globals */\n\nimport { AsyncUtils } from \"./AsyncUtils\";\nimport { concatExampleTags } from \"./ExampleTags\";\n\nconst DEBUG_TAGS = concatExampleTags([\n  \"player:win\",\n  \"player:loss\",\n  \"player:terran\",\n  \"player:protoss\",\n  \"player:zerg\",\n  \"player:ai\",\n\n  \"opponent:win\",\n  \"opponent:loss\",\n  \"opponent:terran\",\n  \"opponent:protoss\",\n  \"opponent:zerg\",\n  \"opponent:ai\",\n\n  \"game:zvp\",\n  \"game:zvt\",\n  \"game:zvz\",\n  \"game:tvz\",\n  \"game:tvp\",\n  \"game:tvt\",\n  \"game:pvt\",\n  \"game:pvz\",\n  \"game:pvp\",\n  \"game:short\",\n  \"game:long\",\n  \"game:1v1\",\n  \"game:2v2\",\n  \"game:3v3\",\n  \"game:4v4\",\n  \"game:ffa\",\n]);\n\nconst debugFunc = (...args) => console.log(args);\n\nconst selectReplayDebugFunc = async (...args) => {\n  debugFunc(args);\n\n  if (args.length < 1) {\n    return;\n  }\n\n  await AsyncUtils.sleep(200);\n\n  const { replayId, force } = args[0];\n\n  Guy.onReplayLoadedListeners.forEach((listener) =>\n    listener.onReplayLoaded({\n      replayId: replayId,\n      replayTimestamp: 1575909015,\n      teams: [\"BobTheZealot\", \"Jim Raynor\"],\n      playerTeam: null,\n      opponentTeam: null,\n      replayFileName: null,\n      selectedTags: [\"game:fake_tag\"],\n      notes: \"Some fake notes\",\n      force: force,\n    })\n  );\n};\n\nconst selectMostRecentReplayDebugFunc = async (...args) => {\n  debugFunc(args);\n\n  await AsyncUtils.sleep(200);\n\n  Guy.onReplayLoadedListeners.forEach((listener) =>\n    listener.onReplayLoaded({\n      replayId: \"SOME HASH VALUE\",\n      replayTimestamp: Math.floor(Date.now() / 1000),\n      teams: [\"Tassadar\", \"Artanis\"],\n      playerTeam: null,\n      opponentTeam: null,\n      replayFileName: null,\n      selectedTags: [\"game:fake_tag_2\"],\n      notes: \"This is the most recently played replay\",\n      force: true,\n    })\n  );\n};\n\nconst selectPlayerOpponentDebugFunc = async (...args) => {\n  debugFunc(args);\n\n  if (args.length < 1) {\n    return;\n  }\n\n  await AsyncUtils.sleep(200);\n\n  const { replayId, playerTeam, opponentTeam } = args[0];\n\n  Guy.onReplayLoadedListeners.forEach((listener) =>\n    listener.onReplayLoaded({\n      replayId: replayId,\n      replayTimestamp: 1575909015,\n      teams: [\"BobTheZealot\", \"JimRaynor\"],\n      playerTeam: playerTeam,\n      opponentTeam: opponentTeam,\n      replayFileName: null,\n      selectedTags: [\"game:fake_tag\"],\n      notes: \"Some fake notes\",\n      force: false,\n    })\n  );\n};\n\nconst updateReplayInfoDebugFunc = async (...args) => {\n  debugFunc(args);\n\n  if (args.length < 1) {\n    return;\n  }\n\n  const { replayId } = args[0];\n\n  await AsyncUtils.sleep(500);\n\n  Guy.onReplayUpdatedListeners.forEach((listener) =>\n    listener.onReplayUpdated({\n      success: true,\n      replayId: replayId,\n    })\n  );\n};\n\nconst findReplaysDebugFunc = async (...args) => {\n  debugFunc(args);\n\n  if (args.length < 1) {\n    return;\n  }\n\n  const payload = args[0];\n  const includeTags = payload.includeTags || [];\n  const excludeTags = payload.excludeTags || [];\n\n  return {\n    replays: [\n      {\n        replayId: \"f91abca15806c6038f9b4af454af40d6dd32\",\n        replayTimestamp: 1602931843,\n        teams: [\"BobTheZealot\", \"JimRaynor\"],\n        notes: \"A truly great game between the two titans of StarCraft\",\n      },\n      {\n        replayId: \"540a1430ffe4d73f7c2c9d87cd2e4907b419\",\n        replayTimestamp: 1585730727,\n        teams: [\"Tassadar\", \"JimRaynor\"],\n        notes:\n          \"An unfortunate disagreement between friends led to this bar fight\",\n      },\n      {\n        replayId: \"ab6ee43405077302a6a9fc3f1ceaf6aae6fc\",\n        replayTimestamp: 1322166082,\n        teams: [\"BobTheZealot\", \"Tassadar\"],\n        notes: \"An awful match\",\n      },\n      {\n        replayId: \"48df54843f16afea0b8b92aa167de0e31912\",\n        replayTimestamp: 1471426714,\n        teams: [\"Tassadar\", \"BobTheZealot\"],\n        notes: \"Very BM\",\n      },\n      {\n        replayId: \"391b6c73cae67daaa1306c5ef5cad275bd29\",\n        replayTimestamp: 1398404675,\n        teams: [\"Tassadar\", \"Artanis\"],\n        notes:\n          \"The quick brown fox jumps over the lazy dog. Abcdefghijklm nopqrs t uvwxy z\",\n      },\n      {\n        replayId: \"03afb9220f1eee91ed3cdcf862446bfb1002\",\n        replayTimestamp: 1435622178,\n        teams: [\"Artanis\", \"BobTheZealot\"],\n        notes: \"\",\n      },\n    ],\n\n    tagFrequencyTable: DEBUG_TAGS.filter(\n      (tag) => !includeTags.includes(tag) && !excludeTags.includes(tag)\n    ).map((tag) => ({\n      tag: tag,\n      frequency: 1,\n    })),\n  };\n};\n\nconst exportReplaysToDirDebugFunc = async (...args) => {\n  debugFunc(args);\n\n  if (args.length < 1) {\n    return;\n  }\n\n  return \"path/to/directory\";\n};\n\nconst exportReplaysToSc2ReplayStatsDebugFunc = async (...args) => {\n  debugFunc(args);\n\n  if (args.length < 1) {\n    return;\n  }\n\n  const { replayIds } = args[0];\n\n  return replayIds.map((replayId) => ({\n    replayId: replayId,\n    teams: [\"BobTheZealot\", \"JimRaynor\"],\n    exportUrl:\n      \"https://sc2replaystats.com/replay/\" +\n      Math.floor(Math.random() * 10000000),\n  }));\n};\n\nconst getScelightPathDebugFunc = async (...args) => {\n  debugFunc(args);\n\n  return null;\n};\n\nconst selectScelightPathDebugFunc = async (...args) => {\n  debugFunc(args);\n\n  return \"path/to/scelight\";\n};\n\nconst getSc2ReplayStatsAuthKeyDebugFunc = async (...args) => {\n  debugFunc(args);\n\n  return \"some_api_key\";\n};\n\nexport const Guy = {\n  selectReplay: (...args) =>\n    ((self && self.selectReplay) || selectReplayDebugFunc)(...args),\n\n  selectMostRecentReplay: (...args) =>\n    ((self && self.selectMostRecentReplay) || selectMostRecentReplayDebugFunc)(\n      ...args\n    ),\n\n  selectPlayerOpponent: (...args) =>\n    ((self && self.selectPlayerOpponent) || selectPlayerOpponentDebugFunc)(\n      ...args\n    ),\n\n  updateReplayInfo: (...args) =>\n    ((self && self.updateReplayInfo) || updateReplayInfoDebugFunc)(...args),\n\n  findReplays: (...args) =>\n    ((self && self.findReplays) || findReplaysDebugFunc)(...args),\n\n  forgetReplays: (...args) =>\n    ((self && self.forgetReplays) || debugFunc)(...args),\n\n  exportReplaysToTempDir: (...args) =>\n    ((self && self.exportReplaysToTempDir) || exportReplaysToDirDebugFunc)(\n      ...args\n    ),\n\n  exportReplaysToTargetDir: (...args) =>\n    ((self && self.exportReplaysToTargetDir) || exportReplaysToDirDebugFunc)(\n      ...args\n    ),\n\n  exportReplaysToScelight: (...args) =>\n    ((self && self.exportReplaysToScelight) || debugFunc)(...args),\n\n  exportReplaysToSc2ReplayStats: (...args) =>\n    (\n      (self && self.exportReplaysToSc2ReplayStats) ||\n      exportReplaysToSc2ReplayStatsDebugFunc\n    )(...args),\n\n  openDirInFileManager: (...args) =>\n    ((self && self.openDirInFileManager) || debugFunc)(...args),\n\n  getScelightPath: (...args) =>\n    ((self && self.getScelightPath) || getScelightPathDebugFunc)(...args),\n\n  selectScelightPath: (...args) =>\n    ((self && self.selectScelightPath) || selectScelightPathDebugFunc)(...args),\n\n  getSc2ReplayStatsAuthKey: (...args) =>\n    (\n      (self && self.getSc2ReplayStatsAuthKey) ||\n      getSc2ReplayStatsAuthKeyDebugFunc\n    )(...args),\n\n  onReplayLoadedListeners: [],\n  onReplayUpdatedListeners: [],\n};\n\nwindow.replayLoaded = async (payload) => {\n  Guy.onReplayLoadedListeners.forEach((listener) =>\n    listener.onReplayLoaded(payload)\n  );\n};\n\n// eslint-disable-next-line no-restricted-globals\nwindow.replayUpdated = async (payload) => {\n  await AsyncUtils.sleep(500);\n  Guy.onReplayUpdatedListeners.forEach((listener) =>\n    listener.onReplayUpdated(payload)\n  );\n};\n","import React from \"react\";\nimport { Button, FileInput } from \"@blueprintjs/core\";\nimport CryptoJS from \"crypto-js/crypto-js\";\nimport \"crypto-js/lib-typedarrays\";\nimport { Guy } from \"./Guy\";\n\nimport \"./ReplaySelector.css\";\n\nconst REPLAY_FILE_PLACEHOLDER_TEXT = \"Choose replay file...\";\n\nconst getFilename = (path) => path.split(\"\\\\\").pop().split(\"/\").pop();\n\nclass ReplaySelector extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      valid: true,\n      disabled: false,\n    };\n  }\n\n  render() {\n    const {\n      replayFileName,\n      setReplayId,\n      setReplayFileName,\n      setReplayData,\n      resetAndDisableForm,\n      ...other\n    } = this.props;\n\n    return (\n      <div className={\"ReplaySelector-container\"}>\n        <FileInput\n          disabled={this.state.disabled}\n          text={replayFileName || REPLAY_FILE_PLACEHOLDER_TEXT}\n          onInputChange={(event) => {\n            const path = event.target.value;\n            if (!path || !event.target.files) {\n              return;\n            }\n\n            const file = event.target.files[0];\n\n            this.setState({ disabled: true });\n            setReplayFileName(getFilename(path));\n            resetAndDisableForm();\n\n            const hashReader = new FileReader();\n            hashReader.addEventListener(\"load\", (event) => {\n              const data = event.target.result;\n              const hash = CryptoJS.SHA256(\n                CryptoJS.lib.WordArray.create(data)\n              ).toString();\n              setReplayId(hash);\n\n              const dataReader = new FileReader();\n              dataReader.addEventListener(\"load\", (event) => {\n                const data = event.target.result;\n                setReplayData(data);\n\n                this.setState({ disabled: false });\n                Guy.selectReplay({ replayId: hash, replayData: data });\n              });\n              dataReader.readAsDataURL(file);\n            });\n            hashReader.readAsArrayBuffer(file);\n          }}\n          inputProps={{ accept: \".sc2replay\" }}\n          {...other}\n        />\n        <Button\n          className={\"ReplaySelector-button\"}\n          text={\"Most recent replay\"}\n          onClick={(event) => {\n            resetAndDisableForm();\n            Guy.selectMostRecentReplay();\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default ReplaySelector;\n","import React from \"react\";\nimport { FormGroup, HTMLSelect, Intent } from \"@blueprintjs/core\";\n\nimport \"./SelectPlayerandOpponentInput.css\";\n\nimport { Guy } from \"./Guy\";\n\nclass SelectPlayerAndOpponentInput extends React.Component {\n  onPlayerSelected(event) {\n    let {\n      replayId,\n      teams,\n      setPlayerTeam,\n      setOpponentTeam,\n      disableForm,\n    } = this.props;\n    let choice = parseInt(event.currentTarget.value);\n    if (choice < 0) {\n      setPlayerTeam(null);\n      return;\n    }\n\n    setPlayerTeam(choice);\n    let playerTeam = choice;\n\n    let opponentTeam = null;\n    if (teams.length === 2) {\n      let inverseChoice = choice === 0 ? 1 : 0;\n      setOpponentTeam(inverseChoice);\n      opponentTeam = inverseChoice;\n    }\n\n    disableForm();\n\n    Guy.selectPlayerOpponent({\n      replayId: replayId,\n      playerTeam: playerTeam,\n      opponentTeam: opponentTeam,\n    });\n  }\n\n  onOpponentSelected(event) {\n    let {\n      replayId,\n      teams,\n      setPlayerTeam,\n      setOpponentTeam,\n      disableForm,\n    } = this.props;\n    let choice = parseInt(event.currentTarget.value);\n    if (choice < 0) {\n      setOpponentTeam(null);\n      return;\n    }\n\n    setOpponentTeam(choice);\n    let opponentTeam = choice;\n\n    let playerTeam = null;\n    if (teams.length === 2) {\n      let inverseChoice = choice === 0 ? 1 : 0;\n      setPlayerTeam(inverseChoice);\n      playerTeam = inverseChoice;\n    }\n\n    disableForm();\n\n    Guy.selectPlayerOpponent({\n      replayId: replayId,\n      playerTeam: playerTeam,\n      opponentTeam: opponentTeam,\n    });\n  }\n\n  render() {\n    let { formDisabled, teams, playerTeam, opponentTeam } = this.props;\n    return (\n      <div className={\"SelectPlayerAndOpponentInput-container\"}>\n        <FormGroup\n          className={\n            \"SelectPlayerAndOpponentInput-form-group SelectPlayerAndOpponentInput-form-group-player\"\n          }\n          label={\"Player\"}\n        >\n          <HTMLSelect\n            disabled={formDisabled}\n            fill={true}\n            iconProps={{ intent: Intent.SUCCESS }}\n            options={[{ label: \"Choose player...\", value: \"-1\" }].concat(\n              teams.map((team, index) => {\n                return { label: team, value: index.toString() };\n              })\n            )}\n            value={playerTeam !== null ? playerTeam.toString() : \"-1\"}\n            onChange={(event) => this.onPlayerSelected(event)}\n          />\n        </FormGroup>\n        <FormGroup\n          className={\"SelectPlayerAndOpponentInput-form-group\"}\n          label={\"Opponent\"}\n        >\n          <HTMLSelect\n            disabled={formDisabled}\n            fill={true}\n            iconProps={{ intent: Intent.DANGER }}\n            options={[{ label: \"Choose opponent...\", value: \"-1\" }].concat(\n              teams.map((team, index) => {\n                return { label: team, value: index.toString() };\n              })\n            )}\n            value={opponentTeam !== null ? opponentTeam.toString() : \"-1\"}\n            onChange={(event) => this.onOpponentSelected(event)}\n          />\n        </FormGroup>\n      </div>\n    );\n  }\n}\n\nexport default SelectPlayerAndOpponentInput;\n","export const DateUtils = {\n  formatDate: (timestamp) => {\n    let date = new Date(timestamp * 1000);\n    return date.toLocaleDateString() + \" \" + date.toLocaleTimeString();\n  },\n\n  toTimestamp: (date) => Math.floor(date.getTime() / 1000),\n};\n","import React from \"react\";\nimport { FormGroup, InputGroup } from \"@blueprintjs/core\";\nimport { DateUtils } from \"./DateUtils\";\n\nclass ReplayDateFormGroup extends React.Component {\n  render() {\n    let { replayTimestamp } = this.props;\n    return (\n      <FormGroup label=\"Replay date\">\n        <InputGroup\n          disabled={true}\n          fill={true}\n          value={replayTimestamp ? DateUtils.formatDate(replayTimestamp) : \"\"}\n        />\n      </FormGroup>\n    );\n  }\n}\n\nexport default ReplayDateFormGroup;\n","import React from \"react\";\n\nimport {\n  Button,\n  FormGroup,\n  InputGroup,\n  Intent,\n  TextArea,\n} from \"@blueprintjs/core\";\n\nimport { IconNames } from \"@blueprintjs/icons\";\n\nimport SelectTagsInput from \"./SelectTagsInput\";\nimport ReplaySelector from \"./ReplaySelector\";\nimport SelectPlayerAndOpponentInput from \"./SelectPlayerAndOpponentInput\";\nimport ReplayDateFormGroup from \"./ReplayDateFormGroup\";\n\nexport function SubmitReplayForm(props) {\n  const {\n    notes,\n    replaySelectedTags,\n    submittingReplay,\n    setNotes,\n    updateReplayInfo,\n    setReplaySelectedTags,\n    ...other\n  } = props;\n  const {\n    replayId,\n    formDisabled,\n    playerTeam,\n    opponentTeam,\n    failedToTagReplay,\n    failedToLoadReplay,\n  } = other;\n  return (\n    <div>\n      <br />\n      <FormGroup label=\"Replay ID\">\n        <InputGroup disabled={true} fill={true} value={replayId} />\n      </FormGroup>\n      <FormGroup\n        label=\"Replay file\"\n        intent={failedToLoadReplay ? Intent.DANGER : null}\n        helperText={\n          failedToLoadReplay\n            ? \"Failed to load replay, please select another or try again.\"\n            : null\n        }\n      >\n        <ReplaySelector fill={true} {...other} />\n      </FormGroup>\n      <ReplayDateFormGroup {...other} />\n      <SelectPlayerAndOpponentInput {...other} />\n      <FormGroup label=\"Player tags\">\n        <SelectTagsInput\n          {...other}\n          fill={true}\n          selectedTags={replaySelectedTags}\n          onTagsSelected={setReplaySelectedTags}\n          disabled={formDisabled || playerTeam === null}\n          tagPrefix={\"player:\"}\n          tagIntent={Intent.SUCCESS}\n        />\n      </FormGroup>\n      <FormGroup label=\"Opponent tags\">\n        <SelectTagsInput\n          {...other}\n          fill={true}\n          selectedTags={replaySelectedTags}\n          onTagsSelected={setReplaySelectedTags}\n          disabled={formDisabled || opponentTeam === null}\n          tagPrefix={\"opponent:\"}\n          tagIntent={Intent.DANGER}\n        />\n      </FormGroup>\n      <FormGroup label=\"Game tags\">\n        <SelectTagsInput\n          {...other}\n          fill={true}\n          selectedTags={replaySelectedTags}\n          onTagsSelected={setReplaySelectedTags}\n          disabled={formDisabled}\n          tagPrefix={\"game:\"}\n          tagIntent={Intent.PRIMARY}\n        />\n      </FormGroup>\n      <FormGroup label=\"Notes\">\n        <TextArea\n          fill={true}\n          disabled={formDisabled}\n          value={notes}\n          onChange={(event) => setNotes(event.target.value)}\n        />\n      </FormGroup>\n      <FormGroup\n        intent={failedToTagReplay ? Intent.DANGER : null}\n        helperText={\n          failedToTagReplay\n            ? \"Failed to save tags, please select another replay or try again.\"\n            : null\n        }\n      >\n        <Button\n          fill={true}\n          loading={submittingReplay}\n          intent={Intent.SUCCESS}\n          disabled={\n            formDisabled || playerTeam === null || opponentTeam === null\n          }\n          onClick={updateReplayInfo}\n          icon={IconNames.TAG}\n        >\n          Save tags\n        </Button>\n      </FormGroup>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Navbar } from \"@blueprintjs/core\";\n\nimport \"./CerebrateNavbar.scss\";\n\nexport class CerebrateNavbar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      navbarTabId: \"Home\",\n    };\n  }\n\n  render() {\n    return (\n      <Navbar className={\"CerebrateNavbar-navbar\"}>\n        <Navbar.Group>\n          <Navbar.Heading className={\"CerebrateNavbar-navbar-heading\"}>\n            <div>\n              <div className={\"CerebrateNavbar-logo\"}>Cerebrate</div>\n              <em className={\"CerebrateNavbar-logo-subtitle\"}>\n                A StarCraft II Replay Manager\n              </em>\n            </div>\n          </Navbar.Heading>\n        </Navbar.Group>\n      </Navbar>\n    );\n  }\n}\n","import React from \"react\";\nimport { Classes, Icon, Tree } from \"@blueprintjs/core\";\nimport { IconNames } from \"@blueprintjs/icons\";\n\nimport { Guy } from \"./Guy\";\nimport { TagUtils } from \"./TagUtils\";\nimport { DateUtils } from \"./DateUtils\";\n\nimport \"./ReplayTagTree.scss\";\n\nconst NodeType = {\n  ROOT: \"root\",\n  REPLAY_FOLDER: \"replay_folder\",\n  REPLAY: \"replay\",\n  TAG: \"tag\",\n  LOADING: \"loading\",\n};\n\nexport class ReplayTagTree extends React.Component {\n  deselectNodes = (nodes) => {\n    if (!nodes) {\n      return;\n    }\n\n    for (const nodeData of nodes) {\n      nodeData.isSelected = false;\n      this.deselectNodes(nodeData.childNodes);\n    }\n  };\n\n  deselectAllNodes = () => {\n    this.deselectNodes(this.props.contents);\n  };\n\n  handleNodeClick = async (nodeData, _, event) => {\n    switch (nodeData.nodeType) {\n      case NodeType.TAG:\n        await this.handleNodeExpand(nodeData);\n        break;\n      case NodeType.REPLAY_FOLDER:\n      case NodeType.REPLAY:\n        if (\n          nodeData.nodeType === NodeType.REPLAY_FOLDER &&\n          !nodeData.isExpanded\n        ) {\n          await this.handleNodeExpand(nodeData);\n          break;\n        }\n\n        if (!event.shiftKey) {\n          const wasSelected = nodeData.isSelected;\n          this.deselectAllNodes();\n          nodeData.isSelected =\n            nodeData.nodeType === NodeType.REPLAY || !wasSelected;\n        } else {\n          nodeData.isSelected = !nodeData.isSelected;\n        }\n\n        if (nodeData.childNodes) {\n          for (let childNode of nodeData.childNodes) {\n            childNode.isSelected = !childNode.disabled && nodeData.isSelected;\n          }\n        }\n\n        if (nodeData.isSelected && !nodeData.isExpanded) {\n          await this.handleNodeExpand(nodeData);\n        }\n        break;\n      default:\n        break;\n    }\n\n    this.props.updateTagTree();\n  };\n\n  handleNodeCollapse = (nodeData) => {\n    switch (nodeData.nodeType) {\n      case NodeType.ROOT:\n        return;\n      case NodeType.TAG:\n      case NodeType.REPLAY_FOLDER:\n        nodeData.isSelected = false;\n        this.deselectNodes(nodeData.childNodes);\n        break;\n      default:\n        break;\n    }\n\n    nodeData.isExpanded = false;\n    this.props.updateTagTree();\n  };\n\n  handleNodeExpand = async (nodeData) => {\n    nodeData.isExpanded = true;\n\n    switch (nodeData.nodeType) {\n      case NodeType.TAG:\n        await this.handleTagNodeExpand(nodeData);\n        break;\n      default:\n        break;\n    }\n\n    this.props.updateTagTree();\n  };\n\n  handleTagNodeExpand = async (nodeData) => {\n    const { includeTags, excludeTags } = this.props;\n\n    const { replays, tagFrequencyTable } = await Guy.findReplays({\n      includeTags: includeTags.concat(nodeData.filterTags),\n      excludeTags: excludeTags,\n    });\n\n    nodeData.childNodes = generateTagOrRootChildNodes(\n      nodeData.filterTags,\n      replays,\n      tagFrequencyTable\n    );\n  };\n\n  render() {\n    return (\n      <Tree\n        {...this.props}\n        onNodeClick={this.handleNodeClick}\n        onNodeExpand={this.handleNodeExpand}\n        onNodeCollapse={this.handleNodeCollapse}\n      />\n    );\n  }\n}\n\nconst generateReplayFolderChildNodes = (replays) => {\n  return replays.map((replay, index) => ({\n    id: index + 1,\n    nodeType: NodeType.REPLAY,\n    replay: replay,\n    icon: <Icon icon={IconNames.DOCUMENT} className={Classes.TREE_NODE_ICON} />,\n    className: \"ReplayTagTree-tree-node\",\n    label: (\n      <div className={\"ReplayTagTree-tree-node-label-replay\"}>\n        <div className={\"ReplayTagTree-tree-node-label-replay-id\"}>\n          {replay.replayId.substring(0, 8)}\n        </div>\n        &nbsp;\n        <div className={\"ReplayTagTree-tree-node-label-replay-teams\"}>\n          {replay.teams.join(\" vs \")}\n        </div>\n        {replay.notes ? (\n          <div className={\"ReplayTagTree-tree-node-label-replay-notes\"}>\n            <em>{replay.notes}</em>\n          </div>\n        ) : null}\n      </div>\n    ),\n    secondaryLabel: (\n      <div className={\"ReplayTagTree-tree-node-secondary-label\"}>\n        <em>{DateUtils.formatDate(replay.replayTimestamp)}</em>\n      </div>\n    ),\n  }));\n};\n\nconst generateTagOrRootChildNodes = (\n  filterTags,\n  replays,\n  tagFrequencyTable\n) => {\n  return [\n    {\n      id: 0,\n      nodeType: NodeType.REPLAY_FOLDER,\n      filterTags: filterTags,\n      icon: (\n        <Icon icon={IconNames.FOLDER_OPEN} className={Classes.TREE_NODE_ICON} />\n      ),\n      label: \"Replays\",\n      childNodes: generateReplayFolderChildNodes(replays),\n    },\n  ].concat(\n    tagFrequencyTable.map((tagInfo, index) => ({\n      id: index + 1,\n      nodeType: NodeType.TAG,\n      filterTags: filterTags.concat(tagInfo.tag),\n      icon: (\n        <Icon\n          icon={IconNames.TAG}\n          intent={TagUtils.getTagIntent(tagInfo.tag)}\n          className={Classes.TREE_NODE_ICON}\n        />\n      ),\n      label: (\n        <div>\n          <span\n            className={\n              \"ReplayTagTree-tree-node-label-\" +\n              TagUtils.extractPrefix(tagInfo.tag) +\n              \"-tag\"\n            }\n          >\n            <span className=\"ReplayTagTree-tree-node-label-tag-prefix\">\n              {TagUtils.extractPrefix(tagInfo.tag)}:&nbsp;\n            </span>\n            <span className=\"ReplayTagTree-tree-node-label-tag-name\">\n              <strong>{TagUtils.removePrefix(tagInfo.tag)}</strong>\n            </span>\n          </span>\n        </div>\n      ),\n      secondaryLabel: (\n        <span className={\"ReplayTagTree-tree-node-secondary-label\"}>\n          <em>{\"Replay(s): \" + tagInfo.frequency} </em>\n        </span>\n      ),\n      childNodes: [\n        {\n          id: 0,\n          nodeType: NodeType.LOADING,\n          label: (\n            <span>\n              <em>Loading...</em>\n            </span>\n          ),\n          disabled: true,\n        },\n      ],\n    }))\n  );\n};\n\nexport const generateTagTreeContents = (replays, tagFrequencyTable) => [\n  {\n    id: 0,\n    nodeType: NodeType.ROOT,\n    filterTags: [],\n    icon: (\n      <Icon icon={IconNames.LIST_COLUMNS} className={Classes.TREE_NODE_ICON} />\n    ),\n    label: (\n      <div className={\"ReplayTagTree-tree-node-label-root\"}>\n        <strong>Replay results</strong>\n      </div>\n    ),\n    secondaryLabel: (\n      <span className={\"ReplayTagTree-tree-node-secondary-label\"}>\n        <em>{\"Replay(s): \" + replays.length}</em>\n      </span>\n    ),\n    isExpanded: true,\n    childNodes: generateTagOrRootChildNodes([], replays, tagFrequencyTable),\n  },\n];\n\nexport const getSelectedReplays = (nodes) => {\n  if (!nodes) {\n    return [];\n  }\n\n  return nodes\n    .filter(\n      (nodeData) => nodeData.isSelected && nodeData.nodeType === NodeType.REPLAY\n    )\n    .map((nodeData) => nodeData.replay)\n    .concat(\n      nodes.map((nodeData) => getSelectedReplays(nodeData.childNodes)).flat()\n    );\n};\n\nexport const forgetSelectedReplays = (nodes) => {\n  if (!nodes) {\n    return;\n  }\n\n  const selectedReplayIds = new Set(\n    getSelectedReplays(nodes).map((replay) => replay.replayId)\n  );\n\n  const forgetSelectedReplaysInner = (nodes) => {\n    if (!nodes) {\n      return;\n    }\n\n    nodes\n      .filter(\n        (nodeData) =>\n          nodeData.nodeType === NodeType.REPLAY &&\n          selectedReplayIds.has(nodeData.replay.replayId)\n      )\n      .forEach((nodeData) => {\n        nodeData.disabled = true;\n        nodeData.isSelected = false;\n      });\n\n    nodes.forEach((nodeData) =>\n      forgetSelectedReplaysInner(nodeData.childNodes)\n    );\n  };\n\n  forgetSelectedReplaysInner(nodes);\n};\n","import {\n  Card,\n  ControlGroup,\n  FormGroup,\n  H5,\n  HTMLSelect,\n  Switch,\n} from \"@blueprintjs/core\";\nimport React from \"react\";\n\nfunction SortFormGroup(props) {\n  const {\n    formGroupLabel,\n    selectOptions,\n    selectValue,\n    sortDescending,\n    setSortDescending,\n  } = props;\n  return (\n    <FormGroup\n      className={\"ReplayFilterAndSort-sorting-form-group\"}\n      contentClassName={\"ReplayFilterAndSort-sorting-form-group-content\"}\n      label={formGroupLabel}\n    >\n      <HTMLSelect\n        fill={true}\n        options={selectOptions}\n        defaultValue={selectValue}\n      />\n      <Switch\n        className={\"ReplayFilterAndSort-sorting-descending-switch\"}\n        checked={sortDescending}\n        innerLabel=\"Ascending\"\n        innerLabelChecked=\"Descending\"\n        onChange={(event) => setSortDescending(event.currentTarget.checked)}\n      />\n    </FormGroup>\n  );\n}\n\nexport function SortOptions(props) {\n  const { sortReplaysDescending, sortTagsDescending } = props;\n\n  return (\n    <Card className={\"ReplayFilterAndSort-container\"}>\n      <H5 className={\"ReplayFilterAndSort-control-group-heading\"}>Sorting</H5>\n      <ControlGroup fill={true} vertical={false}>\n        <SortFormGroup\n          formGroupLabel={\"Sort replays by\"}\n          selectOptions={[{ label: \"Replay date\", value: \"date\" }]}\n          selectValue={\"date\"}\n          sortDescending={sortReplaysDescending}\n          setSortDescending={() => {}}\n        />\n        <SortFormGroup\n          formGroupLabel={\"Sort tags by\"}\n          selectOptions={[{ label: \"Tag frequency\", value: \"frequency\" }]}\n          selectValue={\"frequency\"}\n          sortDescending={sortTagsDescending}\n          setSortDescending={() => {}}\n        />\n      </ControlGroup>\n    </Card>\n  );\n}\n","import { Card, ControlGroup, FormGroup, H5, Intent } from \"@blueprintjs/core\";\nimport SelectTagsInput from \"./SelectTagsInput\";\nimport React from \"react\";\n\nexport function TagsFilter(props) {\n  const { className, selectedTags, onTagsSelected, title, ...other } = props;\n\n  return (\n    <Card className={`ReplayFilterAndSort-container ${className}`}>\n      <H5 className={\"ReplayFilterAndSort-control-group-heading\"}>{title}</H5>\n      <ControlGroup fill={true} vertical={false}>\n        <FormGroup\n          label=\"Player tags\"\n          className={\"ReplayFilterAndSort-select-tags-form-group\"}\n        >\n          <SelectTagsInput\n            selectedTags={selectedTags}\n            onTagsSelected={onTagsSelected}\n            tagPrefix={\"player:\"}\n            tagIntent={Intent.SUCCESS}\n            fill={true}\n            {...other}\n          />\n        </FormGroup>\n        <FormGroup\n          label=\"Opponent tags\"\n          className={\"ReplayFilterAndSort-select-tags-form-group\"}\n        >\n          <SelectTagsInput\n            selectedTags={selectedTags}\n            onTagsSelected={onTagsSelected}\n            tagPrefix={\"opponent:\"}\n            tagIntent={Intent.DANGER}\n            fill={true}\n            {...other}\n          />\n        </FormGroup>\n        <FormGroup\n          label=\"Game tags\"\n          className={\"ReplayFilterAndSort-select-tags-form-group\"}\n        >\n          <SelectTagsInput\n            selectedTags={selectedTags}\n            onTagsSelected={onTagsSelected}\n            tagPrefix={\"game:\"}\n            tagIntent={Intent.PRIMARY}\n            fill={true}\n            {...other}\n          />\n        </FormGroup>\n      </ControlGroup>\n    </Card>\n  );\n}\n","import { Card, FormGroup, H5, Switch } from \"@blueprintjs/core\";\nimport React, { useState } from \"react\";\n\nimport \"./ReplayDateFilter.css\";\nimport { DateRangePicker, TimePrecision } from \"@blueprintjs/datetime\";\n\nexport function ReplayDateFilter(props) {\n  const {\n    filterReplaysByDate,\n    setFilterReplaysByDate,\n    filterDateRange,\n    setFilterDateRange,\n    ...other\n  } = props;\n\n  const [selectedShortcutIndex, setSelectedShortcutIndex] = useState(0);\n\n  return (\n    <div>\n      <Card className={\"ReplayFilterAndSort-container\"}>\n        <H5 className={\"ReplayFilterAndSort-control-group-heading\"}>\n          Replay date\n        </H5>\n        <FormGroup\n          label=\"Filter by replay date\"\n          className={\"ReplayDateFilter-replay-date-form-group\"}\n        >\n          <Switch\n            checked={filterReplaysByDate}\n            innerLabel={\"Show all replays\"}\n            innerLabelChecked={\"Filter replays by date\"}\n            onChange={(event) =>\n              setFilterReplaysByDate(event.currentTarget.checked)\n            }\n          />\n        </FormGroup>\n        {filterReplaysByDate ? (\n          <FormGroup\n            label=\"Choose dates\"\n            className={\"ReplayDateFilter-replay-date-form-group\"}\n          >\n            <div style={{ display: \"inline-block\" }}>\n              <DateRangePicker\n                className={\"ReplayDateFilter-replay-date-range-picker\"}\n                maxDate={new Date()}\n                singleMonthOnly={true}\n                timePickerProps={{\n                  autoFocus: true,\n                  precision: TimePrecision.MINUTE,\n                  defaultValue: new Date(),\n                }}\n                allowSingleDayRange={true}\n                selectedShortcutIndex={selectedShortcutIndex}\n                onShortcutChange={(shortcut, index) =>\n                  setSelectedShortcutIndex(index)\n                }\n                value={filterDateRange}\n                onChange={(selectedDates) => setFilterDateRange(selectedDates)}\n                {...other}\n              />\n            </div>\n          </FormGroup>\n        ) : null}\n      </Card>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport \"./ReplayFilterAndSort.scss\";\nimport { SortOptions } from \"./SortOptions\";\nimport { TagsFilter } from \"./TagsFilter\";\nimport { ReplayDateFilter } from \"./ReplayDateFilter\";\n\nexport function ReplayFilterAndSort(props) {\n  const {\n    includeTags,\n    setIncludeTags,\n    excludeTags,\n    setExcludeTags,\n    ...other\n  } = props;\n\n  return (\n    <div>\n      <ReplayDateFilter {...other} />\n      <SortOptions {...other} />\n      <TagsFilter\n        className={\"ReplayFilterAndSort-container-include-tags\"}\n        title={\"Include tags\"}\n        selectedTags={includeTags}\n        onTagsSelected={setIncludeTags}\n        {...other}\n      />\n      <TagsFilter\n        className={\"ReplayFilterAndSort-container-exclude-tags\"}\n        title={\"Exclude tags\"}\n        selectedTags={excludeTags}\n        onTagsSelected={setExcludeTags}\n        {...other}\n      />\n    </div>\n  );\n}\n","import {\n  Button,\n  Card,\n  Classes,\n  Elevation,\n  FormGroup,\n  H5,\n  HTMLSelect,\n  Icon,\n  InputGroup,\n  Intent,\n  Menu,\n  MenuItem,\n  Overlay,\n  Tag,\n  UL,\n} from \"@blueprintjs/core\";\nimport { IconNames } from \"@blueprintjs/icons\";\nimport { AsyncUtils } from \"./AsyncUtils\";\nimport React, { Fragment, useState } from \"react\";\n\nimport \"./ExportActionsCard.css\";\nimport { Guy } from \"./Guy\";\n\nfunction ExportToDirectoryButton(props) {\n  const {\n    disabled,\n    loading,\n    setLoading,\n    setOutputPath,\n    exportToDirectory,\n  } = props;\n\n  return (\n    <Button\n      fill={true}\n      icon={IconNames.EXPORT}\n      intent={Intent.PRIMARY}\n      loading={loading}\n      disabled={disabled}\n      onClick={async () => {\n        setLoading(true);\n\n        const [outputPath] = await Promise.all([\n          exportToDirectory(),\n          AsyncUtils.sleep(200),\n        ]);\n\n        setLoading(false);\n        setOutputPath(outputPath);\n      }}\n    >\n      Export\n    </Button>\n  );\n}\n\nfunction ExportOutputPathFormGroup(props) {\n  const { loading, outputPath } = props;\n\n  return outputPath ? (\n    <FormGroup label=\"Export output directory\">\n      <InputGroup\n        disabled={loading}\n        fill={true}\n        value={outputPath}\n        leftElement={<Icon icon={IconNames.FOLDER_CLOSE} />}\n        rightElement={\n          <Fragment>\n            <Button\n              loading={loading}\n              icon={IconNames.DUPLICATE}\n              title={\"Copy to clipboard\"}\n              onClick={() => navigator.clipboard.writeText(outputPath)}\n            />\n            <Button\n              loading={loading}\n              icon={IconNames.SHARE}\n              title={\"Open in file manager\"}\n              onClick={() => Guy.openDirInFileManager({ dirPath: outputPath })}\n            />\n          </Fragment>\n        }\n      />\n    </FormGroup>\n  ) : null;\n}\n\nfunction ExportOptionFragment(props) {\n  const {\n    exportTarget,\n    disabled,\n    loading,\n    setLoading,\n    outputPath,\n    setOutputPath,\n    ...other\n  } = props;\n\n  const [\n    sc2ReplayStatsHelpOverlayOpen,\n    setSc2ReplayStatsHelpOverlayOpen,\n  ] = useState(false);\n  const [\n    sc2ReplayStatsExportedReplays,\n    setSc2ReplayStatsExportedReplays,\n  ] = useState([]);\n  const [showSc2ReplayStatsAuthKey, setShowSc2ReplayStatsAuthKey] = useState(\n    false\n  );\n\n  switch (exportTarget) {\n    case \"tempDir\":\n    case \"chooseDir\":\n      const {\n        exportReplaysToTemporaryDirectory,\n        exportReplaysToTargetDirectory,\n      } = other;\n\n      return (\n        <Fragment>\n          <ExportToDirectoryButton\n            disabled={disabled}\n            loading={loading}\n            setLoading={setLoading}\n            setOutputPath={setOutputPath}\n            exportToDirectory={\n              exportTarget === \"tempDir\"\n                ? exportReplaysToTemporaryDirectory\n                : exportReplaysToTargetDirectory\n            }\n          />\n          <ExportOutputPathFormGroup\n            loading={loading}\n            outputPath={outputPath}\n          />\n        </Fragment>\n      );\n    case \"scelight\":\n      const {\n        scelightPath,\n        setScelightPath,\n        exportSelectedReplaysToScelight,\n      } = other;\n\n      return (\n        <Fragment>\n          <FormGroup label=\"Choose Scelight installation\">\n            <InputGroup\n              disabled={loading}\n              fill={true}\n              value={scelightPath ? scelightPath : \"\"}\n              leftElement={<Icon icon={IconNames.APPLICATION} />}\n              rightElement={\n                <Button\n                  loading={loading}\n                  icon={IconNames.DOCUMENT_OPEN}\n                  title={\"Choose location\"}\n                  onClick={async () => {\n                    setLoading(true);\n\n                    const [path] = await Promise.all([\n                      Guy.selectScelightPath(),\n                      AsyncUtils.sleep(200),\n                    ]);\n\n                    setScelightPath(path);\n\n                    setLoading(false);\n                  }}\n                />\n              }\n            />\n          </FormGroup>\n          <Button\n            fill={true}\n            icon={IconNames.EXPORT}\n            intent={Intent.PRIMARY}\n            loading={loading}\n            disabled={disabled || !scelightPath}\n            onClick={async () => {\n              setLoading(true);\n\n              await Promise.all([\n                exportSelectedReplaysToScelight(),\n                AsyncUtils.sleep(200),\n              ]);\n\n              setLoading(false);\n            }}\n          >\n            Export\n          </Button>\n        </Fragment>\n      );\n    case \"sc2replaystats\":\n      const {\n        exportSelectedReplaysToSc2ReplayStats,\n        sc2ReplayStatsAuthKey,\n        setSc2ReplayStatsAuthKey,\n      } = other;\n      return (\n        <Fragment>\n          <FormGroup label=\"Sc2ReplayStats API Key\">\n            <InputGroup\n              type={showSc2ReplayStatsAuthKey ? \"text\" : \"password\"}\n              disabled={loading}\n              fill={true}\n              value={sc2ReplayStatsAuthKey ? sc2ReplayStatsAuthKey : \"\"}\n              leftElement={<Icon icon={IconNames.KEY} />}\n              rightElement={\n                <Fragment>\n                  <Button\n                    disabled={loading}\n                    icon={showSc2ReplayStatsAuthKey ? \"unlock\" : \"lock\"}\n                    intent={Intent.WARNING}\n                    minimal={true}\n                    onClick={() =>\n                      setShowSc2ReplayStatsAuthKey(!showSc2ReplayStatsAuthKey)\n                    }\n                    title={`${\n                      showSc2ReplayStatsAuthKey ? \"Hide\" : \"Show\"\n                    } API Key`}\n                  />\n                  <Button\n                    disabled={loading}\n                    icon={IconNames.HELP}\n                    title={\"Show help\"}\n                    onClick={() => setSc2ReplayStatsHelpOverlayOpen(true)}\n                  />\n                </Fragment>\n              }\n              onChange={(event) =>\n                setSc2ReplayStatsAuthKey(event.currentTarget.value)\n              }\n            />\n          </FormGroup>\n          <Button\n            fill={true}\n            icon={IconNames.EXPORT}\n            intent={Intent.PRIMARY}\n            loading={loading}\n            disabled={disabled || !sc2ReplayStatsAuthKey}\n            onClick={async () => {\n              setLoading(true);\n\n              const [exportedReplays] = await Promise.all([\n                exportSelectedReplaysToSc2ReplayStats(sc2ReplayStatsAuthKey),\n                AsyncUtils.sleep(200),\n              ]);\n\n              setSc2ReplayStatsExportedReplays(exportedReplays);\n\n              setLoading(false);\n            }}\n          >\n            Export\n          </Button>\n          {sc2ReplayStatsExportedReplays.length === 0 ? null : (\n            <Menu className={\"ExportActionsCard-sc2replaystats-export-list\"}>\n              {sc2ReplayStatsExportedReplays.map((replay) => (\n                <MenuItem\n                  text={\n                    <div\n                      className={\n                        \"ExportActionsCard-sc2replaystats-export-list-item\"\n                      }\n                    >\n                      <div>\n                        <span\n                          className={\n                            \"ExportActionsCard-sc2replaystats-export-list-replay-id\"\n                          }\n                        >\n                          {replay.replayId.substring(0, 8)}\n                        </span>\n                        &nbsp;\n                        <span>{replay.teams.join(\" vs \")}</span>\n                      </div>\n                      <div>\n                        <a\n                          href={replay.exportUrl}\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                        >\n                          {replay.exportUrl}\n                        </a>\n                      </div>\n                    </div>\n                  }\n                />\n              ))}\n            </Menu>\n          )}\n          <Overlay isOpen={sc2ReplayStatsHelpOverlayOpen}>\n            <Card\n              className={\"ExportActionsCard-sc2replaystats-help-overlay-card\"}\n              elevation={Elevation.FOUR}\n            >\n              <H5>How to find your Sc2ReplayStats API Key</H5>\n              <UL>\n                <li>\n                  Sign in to{\" \"}\n                  <a\n                    href=\"https://sc2replaystats.com/Account/signin\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    Sc2ReplayStats\n                  </a>\n                </li>\n                <li>\n                  In the navigation bar, navigate through to{\" \"}\n                  <Tag large={true}>My Account</Tag>{\" \"}\n                  <Icon icon={IconNames.ARROW_RIGHT} />{\" \"}\n                  <Tag large={true}>Settings</Tag>\n                </li>\n                <li>\n                  Click <Tag large={true}>API Access</Tag> in the side menu.\n                </li>\n                <li>\n                  <Tag round={true} minimal={true}>\n                    <em>Optional&nbsp;</em>\n                  </Tag>{\" \"}\n                  Click the <Tag large={true}>Generate New API Key</Tag> button.\n                </li>\n                <li>\n                  Copy your authorization key and paste it into Cerebrate.\n                </li>\n              </UL>\n              <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                <Button onClick={() => setSc2ReplayStatsHelpOverlayOpen(false)}>\n                  Close\n                </Button>\n              </div>\n            </Card>\n          </Overlay>\n        </Fragment>\n      );\n    default:\n      return null;\n  }\n}\n\nexport class ExportActionsCard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      exportOption: \"tempDir\",\n      outputPath: null,\n      scelightPath: null,\n      sc2ReplayStatsAuthKey: null,\n    };\n  }\n\n  async componentDidMount() {\n    this.setState({\n      scelightPath: await Guy.getScelightPath(),\n      sc2ReplayStatsAuthKey: await Guy.getSc2ReplayStatsAuthKey(),\n    });\n  }\n\n  render() {\n    const {\n      className,\n      disabled,\n      loading,\n      setLoading,\n      exportReplaysToTemporaryDirectory,\n      exportReplaysToTargetDirectory,\n      exportSelectedReplaysToScelight,\n      exportSelectedReplaysToSc2ReplayStats,\n    } = this.props;\n\n    return (\n      <Card className={className}>\n        <H5>Export actions</H5>\n        <FormGroup label={\"Export replay(s) to\"}>\n          <HTMLSelect\n            fill={true}\n            options={[\n              { label: \"Temporary directory\", value: \"tempDir\" },\n              {\n                label: \"Choose directory...\",\n                value: \"chooseDir\",\n              },\n              {\n                label: \"Scelight\",\n                value: \"scelight\",\n              },\n              {\n                label: \"Sc2ReplayStats\",\n                value: \"sc2replaystats\",\n              },\n            ]}\n            onChange={(event) =>\n              this.setState({\n                exportOption: event.currentTarget.value,\n                outputPath: null,\n              })\n            }\n          />\n        </FormGroup>\n        <ExportOptionFragment\n          disabled={disabled}\n          loading={loading}\n          setLoading={setLoading}\n          exportTarget={this.state.exportOption}\n          outputPath={this.state.outputPath}\n          setOutputPath={(outputPath) =>\n            this.setState({ outputPath: outputPath })\n          }\n          scelightPath={this.state.scelightPath}\n          setScelightPath={(scelightPath) =>\n            this.setState({ scelightPath: scelightPath })\n          }\n          sc2ReplayStatsAuthKey={this.state.sc2ReplayStatsAuthKey}\n          setSc2ReplayStatsAuthKey={(sc2ReplayStatsAuthKey) =>\n            this.setState({ sc2ReplayStatsAuthKey: sc2ReplayStatsAuthKey })\n          }\n          exportReplaysToTemporaryDirectory={exportReplaysToTemporaryDirectory}\n          exportReplaysToTargetDirectory={exportReplaysToTargetDirectory}\n          exportSelectedReplaysToScelight={exportSelectedReplaysToScelight}\n          exportSelectedReplaysToSc2ReplayStats={\n            exportSelectedReplaysToSc2ReplayStats\n          }\n        />\n      </Card>\n    );\n  }\n}\n","import React from \"react\";\nimport {\n  forgetSelectedReplays,\n  generateTagTreeContents,\n  getSelectedReplays,\n  ReplayTagTree,\n} from \"./ReplayTagTree\";\nimport { ReplayFilterAndSort } from \"./ReplayFilterAndSort\";\nimport { Alert, Button, Card, Classes, H5, Intent } from \"@blueprintjs/core\";\nimport { IconNames } from \"@blueprintjs/icons\";\n\nimport \"./FindReplays.css\";\nimport { AsyncUtils } from \"./AsyncUtils\";\nimport { Guy } from \"./Guy\";\nimport { DateUtils } from \"./DateUtils\";\nimport { ExportActionsCard } from \"./ExportActionsCard\";\n\nconst isValidDateRange = (dateRange) =>\n  dateRange.length === 2 && dateRange[0] !== null && dateRange[1] !== null;\n\nexport class FindReplays extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      resultsCounter: 0,\n\n      filterReplaysByDate: false,\n      setFilterReplaysByDate: (filterReplaysByDate) => {\n        this.setState({ filterReplaysByDate: filterReplaysByDate });\n      },\n\n      filterDateRange: [new Date(new Date().setHours(0, 0, 0, 0)), new Date()],\n      setFilterDateRange: (filterDateRange) => {\n        this.setState({ filterDateRange: filterDateRange });\n      },\n\n      sortReplaysDescending: true,\n      setSortReplaysDescending: (sortReplaysDescending) => {\n        this.setState({\n          sortReplaysDescending: sortReplaysDescending,\n        });\n      },\n\n      sortTagsDescending: true,\n      setSortTagsDescending: (sortReplaysDescending) => {\n        this.setState({\n          sortReplaysDescending: sortReplaysDescending,\n        });\n      },\n\n      includeTags: [\"game:1v1\"],\n      setIncludeTags: (includeTags) => {\n        this.setState({\n          includeTags: includeTags,\n        });\n      },\n\n      excludeTags: [\"opponent:ai\"],\n      setExcludeTags: (excludeTags) => {\n        this.setState({\n          excludeTags: excludeTags,\n        });\n      },\n\n      tagTreeContents: [],\n      setTagTreeContents: (tagTreeContents) => {\n        this.setState({\n          tagTreeContents: tagTreeContents,\n        });\n      },\n      updateTagTree: () => {\n        this.setState(this.state);\n      },\n\n      viewDetailsButtonLoading: false,\n      isConfirmForgetAlertOpen: false,\n\n      exportReplaysButtonLoading: false,\n    };\n  }\n\n  getSelectedReplayIds = () => {\n    return getSelectedReplays(this.state.tagTreeContents).map(\n      (replay) => replay.replayId\n    );\n  };\n\n  render() {\n    const { setNavbarTabId } = this.props;\n\n    return (\n      <div>\n        <div className={\"FindReplays-filter-sort-container\"}>\n          <ReplayFilterAndSort {...this.props} {...this.state} />\n          <Button\n            fill={true}\n            intent={Intent.PRIMARY}\n            loading={this.state.loading}\n            onClick={() => {\n              this.setState({\n                loading: true,\n              });\n\n              (async () => {\n                const payload = {\n                  includeTags: this.state.includeTags,\n                  excludeTags: this.state.excludeTags,\n\n                  ...(this.state.filterReplaysByDate &&\n                    isValidDateRange(this.state.filterDateRange) && {\n                      startTimestamp: DateUtils.toTimestamp(\n                        this.state.filterDateRange[0]\n                      ),\n                      endTimestamp: DateUtils.toTimestamp(\n                        this.state.filterDateRange[1]\n                      ),\n                    }),\n                };\n\n                const [{ replays, tagFrequencyTable }] = await Promise.all([\n                  Guy.findReplays(payload),\n                  AsyncUtils.sleep(200),\n                ]);\n\n                this.setState({\n                  loading: false,\n                  resultsCounter: this.state.resultsCounter + 1,\n                  tagTreeContents: generateTagTreeContents(\n                    replays,\n                    tagFrequencyTable\n                  ),\n                });\n              })();\n            }}\n            icon={IconNames.SEARCH}\n          >\n            Find replays\n          </Button>\n        </div>\n        {this.state.resultsCounter === 0 ? null : (\n          <div\n            className={`FindReplays-results-container ${\n              this.state.loading ? Classes.SKELETON : \"\"\n            }`}\n          >\n            <ReplayTagTree\n              className={\"FindReplays-tag-tree\"}\n              key={this.state.resultsCounter}\n              contents={this.state.tagTreeContents}\n              {...this.props}\n              {...this.state}\n            />\n            <div className={\"FindReplays-result-options-container\"}>\n              <Card className={\"FindReplays-result-options-card\"}>\n                <H5>Replay actions</H5>\n                <Button\n                  fill={true}\n                  icon={IconNames.DOCUMENT}\n                  disabled={\n                    getSelectedReplays(this.state.tagTreeContents).length !== 1\n                  }\n                  loading={this.state.viewDetailsButtonLoading}\n                  onClick={async (event) => {\n                    const selectedReplays = getSelectedReplays(\n                      this.state.tagTreeContents\n                    );\n                    if (selectedReplays.length !== 1) {\n                      return;\n                    }\n                    this.setState({ viewDetailsButtonLoading: true });\n\n                    await Guy.selectReplay({\n                      replayId: selectedReplays[0].replayId,\n                      force: true,\n                    });\n\n                    this.setState({ viewDetailsButtonLoading: false });\n                    setNavbarTabId(\"form\");\n                  }}\n                >\n                  View details\n                </Button>\n                <Button\n                  fill={true}\n                  intent={Intent.WARNING}\n                  icon={IconNames.DELETE}\n                  disabled={\n                    getSelectedReplays(this.state.tagTreeContents).length === 0\n                  }\n                  onClick={() => {\n                    this.setState({ isConfirmForgetAlertOpen: true });\n                  }}\n                >\n                  Forget replay(s)\n                </Button>\n                <Alert\n                  isOpen={this.state.isConfirmForgetAlertOpen}\n                  cancelButtonText={\"Cancel\"}\n                  confirmButtonText={\"Forget replay(s)\"}\n                  canOutsideClickCancel={true}\n                  onCancel={() =>\n                    this.setState({ isConfirmForgetAlertOpen: false })\n                  }\n                  onConfirm={async () => {\n                    await Guy.forgetReplays({\n                      replayIds: this.getSelectedReplayIds(),\n                    });\n\n                    forgetSelectedReplays(this.state.tagTreeContents);\n                    this.state.updateTagTree();\n                    this.setState({ isConfirmForgetAlertOpen: false });\n                  }}\n                  intent={Intent.WARNING}\n                  icon={IconNames.WARNING_SIGN}\n                >\n                  Are you sure you want to forget these replays? This will cause\n                  any tags you might have added to be permanently lost.\n                </Alert>\n              </Card>\n              <ExportActionsCard\n                className={\"FindReplays-result-options-card\"}\n                loading={this.state.exportReplaysButtonLoading}\n                setLoading={(loading) =>\n                  this.setState({ exportReplaysButtonLoading: loading })\n                }\n                disabled={\n                  getSelectedReplays(this.state.tagTreeContents).length === 0\n                }\n                exportReplaysToTemporaryDirectory={async () =>\n                  Guy.exportReplaysToTempDir({\n                    replayIds: this.getSelectedReplayIds(),\n                  })\n                }\n                exportReplaysToTargetDirectory={async () =>\n                  Guy.exportReplaysToTargetDir({\n                    replayIds: this.getSelectedReplayIds(),\n                  })\n                }\n                exportSelectedReplaysToScelight={async () =>\n                  Guy.exportReplaysToScelight({\n                    replayIds: this.getSelectedReplayIds(),\n                  })\n                }\n                exportSelectedReplaysToSc2ReplayStats={async (authKey) =>\n                  Guy.exportReplaysToSc2ReplayStats({\n                    replayIds: this.getSelectedReplayIds(),\n                    authKey: authKey,\n                  })\n                }\n              />\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.scss\";\nimport { SubmitReplayForm } from \"./SubmitReplayForm\";\nimport { Guy } from \"./Guy\";\nimport { CerebrateNavbar } from \"./CerebrateNavbar\";\nimport { Card, Elevation, Tab, Tabs } from \"@blueprintjs/core\";\nimport { FindReplays } from \"./FindReplays\";\nimport { concatExampleTags } from \"./ExampleTags\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      replayId: \"\",\n      setReplayId: (replayId) => this.setState({ replayId: replayId }),\n\n      replayFileName: \"\",\n      setReplayFileName: (replayFileName) =>\n        this.setState({ replayFileName: replayFileName }),\n\n      replayTimestamp: null,\n\n      replayData: \"\",\n      setReplayData: (replayData) => this.setState({ replayData: replayData }),\n\n      teams: [],\n\n      playerTeam: null,\n      setPlayerTeam: (index) => this.setState({ playerTeam: index }),\n\n      opponentTeam: null,\n      setOpponentTeam: (index) => this.setState({ opponentTeam: index }),\n\n      replaySelectedTags: [],\n      setReplaySelectedTags: (replaySelectedTags) =>\n        this.setState({ replaySelectedTags: replaySelectedTags }),\n\n      notes: \"\",\n      setNotes: (notes) => this.setState({ notes: notes }),\n\n      formDisabled: true,\n      disableForm: () => this.setState({ formDisabled: true }),\n\n      resetAndDisableForm: () =>\n        this.setState({\n          failedToLoadReplay: false,\n          replayId: \"\",\n          replayTimestamp: null,\n          teams: [],\n          playerTeam: null,\n          opponentTeam: null,\n          replaySelectedTags: [],\n          notes: \"\",\n          formDisabled: true,\n        }),\n\n      failedToLoadReplay: false,\n      failedToTagReplay: false,\n      submittingReplay: false,\n\n      navbarTabId: \"form\",\n      setNavbarTabId: (navbarTabId) => {\n        this.setState({ navbarTabId: navbarTabId });\n      },\n\n      suggestTags: [],\n\n      updateReplayInfo: () => {\n        this.setState({\n          formDisabled: true,\n          submittingReplay: true,\n        });\n        Guy.updateReplayInfo({\n          replayId: this.state.replayId,\n          replayData: this.state.replayData,\n          selectedTags: this.state.replaySelectedTags,\n          playerTeam: this.state.playerTeam,\n          opponentTeam: this.state.opponentTeam,\n          notes: this.state.notes,\n        });\n      },\n    };\n  }\n\n  componentDidMount() {\n    Guy.onReplayLoadedListeners.push(this);\n    Guy.onReplayUpdatedListeners.push(this);\n\n    (async () => {\n      const { tagFrequencyTable } = await Guy.findReplays({});\n      this.setState({\n        suggestTags: concatExampleTags(\n          tagFrequencyTable.map((entry) => entry.tag)\n        ),\n      });\n    })();\n  }\n\n  componentWillUnmount() {\n    Guy.onReplayLoadedListeners.splice(\n      Guy.onReplayLoadedListeners.indexOf(this),\n      1\n    );\n    Guy.onReplayUpdatedListeners.splice(\n      Guy.onReplayUpdatedListeners.indexOf(this),\n      1\n    );\n  }\n\n  onReplayLoaded({\n    replayId,\n    replayFileName,\n    replayData,\n    replayTimestamp,\n    teams,\n    playerTeam,\n    opponentTeam,\n    selectedTags,\n    notes,\n    force,\n  }) {\n    if (!force && this.state.replayId !== replayId) {\n      this.setState({\n        formDisabled: true,\n        submittingReplay: false,\n        failedToLoadReplay: true,\n        replayId: \"\",\n        teams: [],\n        playerTeam: null,\n        opponentTeam: null,\n        replayTimestamp: null,\n        replaySelectedTags: [],\n        notes: \"\",\n      });\n      return;\n    }\n\n    this.setState({\n      replayId: replayId,\n      replayData: replayData || this.state.replayData,\n      formDisabled: false,\n      submittingReplay: false,\n      failedToLoadReplay: false,\n      replayTimestamp: replayTimestamp,\n      teams: teams,\n      playerTeam: playerTeam,\n      opponentTeam: opponentTeam,\n      replayFileName: replayFileName || this.state.replayFileName,\n      replaySelectedTags: selectedTags,\n      notes: notes,\n    });\n  }\n\n  onReplayUpdated({ success, replayId }) {\n    this.setState({ submittingReplay: false });\n\n    if (this.state.replayId === replayId) {\n      this.setState({ failedToTagReplay: !success, formDisabled: false });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Card elevation={Elevation.TWO} className={\"App-card\"}>\n          <CerebrateNavbar />\n          <div className={\"App-break\"}>\n            <br />\n          </div>\n          <Tabs\n            animate={true}\n            id=\"navbar\"\n            large={true}\n            selectedTabId={this.state.navbarTabId}\n            onChange={(newTabId) => this.setState({ navbarTabId: newTabId })}\n          >\n            <Tab\n              id=\"form\"\n              title=\"Replay Details\"\n              panel={<SubmitReplayForm {...this.state} />}\n            />\n            <Tab\n              id=\"search\"\n              title=\"Find Replays\"\n              panel={<FindReplays {...this.state} />}\n            />\n          </Tabs>\n        </Card>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}