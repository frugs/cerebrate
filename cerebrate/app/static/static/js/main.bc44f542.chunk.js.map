{"version":3,"sources":["SelectTagsInput.js","Guy.js","ReplaySelector.js","SubmitReplayForm.js","App.js","serviceWorker.js","index.js"],"names":["SelectTagsInput","props","tagPrefix","tag","indexOf","this","slice","length","tagIntent","tags","selectedTags","formDisabled","setSelectedTags","createNewItemRenderer","query","active","handleClick","onClick","text","itemRenderer","item","modifiers","matchesPredicate","removePrefix","itemPredicate","index","exactMatch","includes","toLocaleLowerCase","initialContent","items","selectedItems","filter","createNewItemFromQuery","onItemSelect","push","resetOnSelect","tagRenderer","tagInputProps","disabled","onRemove","valueAsString","value","splice","tagProps","intent","openOnKeyDown","fill","placeholder","React","Component","debugFunc","args","console","log","sleep","ms","a","Promise","resolve","setTimeout","selectReplayDebugFunc","replayId","Guy","onReplayLoadedListeners","forEach","listener","onReplayLoaded","replayFileName","notes","force","submitTaggedReplayDebugFunc","onReplayUpdatedListeners","onReplayUpdated","success","selectReplay","self","submitTaggedReplay","window","replayLoaded","payload","replayUpdated","ReplaySelector","state","valid","setReplayId","setReplayFileName","setReplayData","resetAndDisableForm","other","onInputChange","event","path","target","files","file","setState","split","pop","getFilename","hashReader","FileReader","addEventListener","data","result","hash","CryptoJS","SHA256","lib","WordArray","create","toString","dataReader","replayData","readAsDataURL","readAsArrayBuffer","inputProps","accept","SubmitReplayForm","submittingReplay","setNotes","failedToTagReplay","failedToLoadReplay","interactive","elevation","Elevation","TWO","className","label","Intent","DANGER","helperText","SUCCESS","PRIMARY","onChange","loading","icon","IconNames","TAG","EXAMPLE_TAGS","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bc44f542.chunk.js","sourcesContent":["import React from \"react\";\nimport { MenuItem } from \"@blueprintjs/core\";\nimport { MultiSelect } from \"@blueprintjs/select\";\n\nclass SelectTagsInput extends React.Component {\n  constructor(props) {\n    super(props);\n    const { tagPrefix } = props;\n    this.tagPrefix = tagPrefix;\n  }\n\n  removePrefix(tag) {\n    if (tag.indexOf(this.tagPrefix) !== 0) {\n      return tag;\n    }\n\n    return tag.slice(this.tagPrefix.length);\n  }\n\n  render() {\n    const {\n      tagIntent,\n      tags,\n      selectedTags,\n      formDisabled,\n      setSelectedTags,\n    } = this.props;\n\n    return (\n      <MultiSelect\n        createNewItemRenderer={(query, active, handleClick) => {\n          return (\n            <MenuItem active={active} onClick={handleClick} text={query} />\n          );\n        }}\n        itemRenderer={(item, { modifiers, handleClick }) => {\n          if (!modifiers.matchesPredicate) {\n            return null;\n          }\n\n          return (\n            <MenuItem\n              active={modifiers.active}\n              onClick={handleClick}\n              text={this.removePrefix(item)}\n            />\n          );\n        }}\n        itemPredicate={(query, item, index, exactMatch) =>\n          item.indexOf(this.tagPrefix) === 0 &&\n          !selectedTags.includes(item) &&\n          item.includes(query.toLocaleLowerCase(\"en-GB\"))\n        }\n        initialContent={null}\n        items={tags}\n        selectedItems={selectedTags.filter(\n          (tag) => tag.indexOf(this.tagPrefix) === 0\n        )}\n        createNewItemFromQuery={(query) => this.tagPrefix + query}\n        onItemSelect={(item) => {\n          if (!selectedTags.includes(item)) {\n            selectedTags.push(item);\n            setSelectedTags(selectedTags);\n          }\n        }}\n        resetOnSelect={true}\n        tagRenderer={(item) => this.removePrefix(item)}\n        tagInputProps={{\n          disabled: formDisabled,\n          onRemove: (valueAsString, index, value) => {\n            selectedTags.splice(\n              selectedTags.indexOf(this.tagPrefix + valueAsString),\n              1\n            );\n            setSelectedTags(selectedTags);\n          },\n          tagProps: { intent: tagIntent },\n        }}\n        openOnKeyDown={true}\n        fill={true}\n        placeholder={\"Tags...\"}\n      />\n    );\n  }\n}\n\nexport default SelectTagsInput;\n","const debugFunc = (...args) => console.log(args);\n\nconst sleep = async (ms) =>\n  await new Promise((resolve) => setTimeout(resolve, ms));\n\nconst selectReplayDebugFunc = async (...args) => {\n  debugFunc(args);\n\n  if (args.length < 1) {\n    return;\n  }\n\n  await sleep(200);\n\n  const { replayId } = args[0];\n\n  Guy.onReplayLoadedListeners.forEach((listener) =>\n    listener.onReplayLoaded({\n      replayId: replayId,\n      replayFileName: null,\n      selectedTags: [\"game:fake_tag\"],\n      notes: \"Some fake notes\",\n      force: false,\n    })\n  );\n};\n\nconst submitTaggedReplayDebugFunc = async (...args) => {\n  debugFunc(args);\n\n  if (args.length < 1) {\n    return;\n  }\n\n  const { replayId } = args[0];\n\n  await sleep(500);\n\n  Guy.onReplayUpdatedListeners.forEach((listener) =>\n      listener.onReplayUpdated({ success: true, replayId: replayId })\n  );\n};\n\nconst Guy = {\n  selectReplay: (...args) =>\n    // eslint-disable-next-line no-restricted-globals\n    ((self && self.selectReplay) || selectReplayDebugFunc)(...args),\n  submitTaggedReplay: (...args) =>\n    // eslint-disable-next-line no-restricted-globals\n    ((self && self.submitTaggedReplay) || submitTaggedReplayDebugFunc)(...args),\n\n  onReplayLoadedListeners: [],\n  onReplayUpdatedListeners: [],\n};\n\n// eslint-disable-next-line no-restricted-globals\nwindow.replayLoaded = async (payload) => {\n  await sleep(200);\n  Guy.onReplayLoadedListeners.forEach((listener) =>\n    listener.onReplayLoaded(payload)\n  );\n};\n\n// eslint-disable-next-line no-restricted-globals\nwindow.replayUpdated = async (payload) => {\n  await sleep(500);\n  Guy.onReplayUpdatedListeners.forEach((listener) =>\n    listener.onReplayUpdated(payload)\n  );\n};\n\nexport default Guy;\n","import React from \"react\";\nimport { FileInput } from \"@blueprintjs/core\";\nimport CryptoJS from \"crypto-js/crypto-js\";\nimport \"crypto-js/lib-typedarrays\";\nimport Guy from \"./Guy\";\n\nconst REPLAY_FILE_PLACEHOLDER_TEXT = \"Choose replay file...\";\n\nconst getFilename = (path) => path.split(\"\\\\\").pop().split(\"/\").pop();\n\nclass ReplaySelector extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      valid: true,\n      disabled: false,\n    };\n  }\n\n  render() {\n    const {\n      replayFileName,\n      setReplayId,\n      setReplayFileName,\n      setReplayData,\n      resetAndDisableForm,\n      ...other\n    } = this.props;\n\n    return (\n      <FileInput\n        disabled={this.state.disabled}\n        text={replayFileName || REPLAY_FILE_PLACEHOLDER_TEXT}\n        onInputChange={(event) => {\n          const path = event.target.value;\n          if (!path || !event.target.files) {\n              return;\n          }\n\n          const file = event.target.files[0];\n\n          this.setState({ disabled: true });\n          setReplayFileName(getFilename(path));\n          resetAndDisableForm();\n\n          const hashReader = new FileReader();\n          hashReader.addEventListener(\"load\", (event) => {\n            const data = event.target.result;\n            const hash = CryptoJS.SHA256(\n              CryptoJS.lib.WordArray.create(data)\n            ).toString();\n            setReplayId(hash);\n\n            const dataReader = new FileReader();\n            dataReader.addEventListener(\"load\", (event) => {\n              const data = event.target.result;\n              setReplayData(data);\n\n              this.setState({ disabled: false });\n              Guy.selectReplay({ replayId: hash, replayData: data });\n            });\n            dataReader.readAsDataURL(file);\n          });\n          hashReader.readAsArrayBuffer(file);\n        }}\n        inputProps={{ accept: \".sc2replay\" }}\n        {...other}\n      />\n    );\n  }\n}\n\nexport default ReplaySelector;\n","import React from \"react\";\n\nimport {\n  Button,\n  Card,\n  Elevation,\n  FormGroup,\n  H2,\n  InputGroup,\n  Intent,\n  TextArea,\n} from \"@blueprintjs/core\";\n\nimport { IconNames } from \"@blueprintjs/icons\";\n\nimport \"./SubmitReplayForm.css\";\nimport SelectTagsInput from \"./SelectTagsInput\";\nimport ReplaySelector from \"./ReplaySelector\";\n\nfunction SubmitReplayForm(props) {\n  let {\n    replayId,\n    notes,\n    submittingReplay,\n    setNotes,\n    submitTaggedReplay,\n    ...other\n  } = props;\n  const { formDisabled, failedToTagReplay, failedToLoadReplay } = other;\n  return (\n    <Card\n      interactive={true}\n      elevation={Elevation.TWO}\n      className={\"SubmitReplayForm-card\"}\n    >\n      <H2>Save replay tags</H2>\n      <br />\n      <FormGroup label=\"Replay ID\">\n        <InputGroup disabled={true} fill={true} value={replayId} />\n      </FormGroup>\n      <FormGroup\n        label=\"Replay file\"\n        intent={failedToLoadReplay ? Intent.DANGER : null}\n        helperText={\n          failedToLoadReplay\n            ? \"Failed to load replay, please select another or try again.\"\n            : null\n        }\n      >\n        <ReplaySelector fill={true} {...other} />\n      </FormGroup>\n      <FormGroup label=\"Player tags\">\n        <SelectTagsInput\n          {...other}\n          tagPrefix={\"player:\"}\n          tagIntent={Intent.SUCCESS}\n        />\n      </FormGroup>\n      <FormGroup label=\"Opponent tags\">\n        <SelectTagsInput\n          {...other}\n          tagPrefix={\"opponent:\"}\n          tagIntent={Intent.DANGER}\n        />\n      </FormGroup>\n      <FormGroup label=\"Game tags\">\n        <SelectTagsInput\n          {...other}\n          tagPrefix={\"game:\"}\n          tagIntent={Intent.PRIMARY}\n        />\n      </FormGroup>\n      <FormGroup label=\"Notes\">\n        <TextArea\n          fill={true}\n          disabled={formDisabled}\n          value={notes}\n          onChange={(event) => setNotes(event.target.value)}\n        />\n      </FormGroup>\n      <FormGroup\n        intent={failedToTagReplay ? Intent.DANGER : null}\n        helperText={\n          failedToTagReplay\n            ? \"Failed to save tags, please select another replay or try again.\"\n            : null\n        }\n      >\n        <Button\n          fill={true}\n          loading={submittingReplay}\n          intent={Intent.SUCCESS}\n          disabled={formDisabled}\n          onClick={submitTaggedReplay}\n          icon={IconNames.TAG}\n        >\n          Save tags\n        </Button>\n      </FormGroup>\n    </Card>\n  );\n}\n\nexport default SubmitReplayForm;\n","import React from \"react\";\nimport \"./App.scss\";\nimport SubmitReplayForm from \"./SubmitReplayForm\";\nimport Guy from \"./Guy\";\n\nconst EXAMPLE_TAGS = [\n  \"player:terran\",\n  \"player:protoss\",\n  \"player:zerg\",\n  \"player:macro\",\n  \"player:all_in\",\n  \"player:2_base_all_in\",\n  \"player:mech\",\n  \"player:bio\",\n  \"player:stargate\",\n  \"player:twilight\",\n  \"player:dt\",\n  \"player:mass_pheonix\",\n  \"player:mass_void_ray\",\n  \"player:air_toss\",\n  \"player:cannon_rush\",\n  \"player:proxy_barracks\",\n  \"player:proxy_hatch\",\n  \"player:winner\",\n  \"player:loser\",\n\n  \"opponent:terran\",\n  \"opponent:protoss\",\n  \"opponent:zerg\",\n  \"opponent:macro\",\n  \"opponent:all_in\",\n  \"opponent:2_base_all_in\",\n  \"opponent:mech\",\n  \"opponent:bio\",\n  \"opponent:stargate\",\n  \"opponent:twilight\",\n  \"opponent:dt\",\n  \"opponent:mass_pheonix\",\n  \"opponent:mass_void_ray\",\n  \"opponent:air_toss\",\n  \"opponent:cannon_rush\",\n  \"opponent:proxy_barracks\",\n  \"opponent:proxy_hatch\",\n  \"opponent:winner\",\n  \"opponent:loser\",\n\n  \"game:zvp\",\n  \"game:zvt\",\n  \"game:zvz\",\n  \"game:tvz\",\n  \"game:tvp\",\n  \"game:tvt\",\n  \"game:pvt\",\n  \"game:pvz\",\n  \"game:pvp\",\n  \"game:short\",\n  \"game:long\",\n  \"game:basetrade\",\n];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      replayId: \"\",\n      replayFileName: \"\",\n      replayData: \"\",\n      selectedTags: [],\n      formDisabled: true,\n      failedToLoadReplay: false,\n      failedToTagReplay: false,\n      submittingReplay: false,\n      notes: \"\",\n\n      setReplayId: (replayId) => this.setState({ replayId: replayId }),\n\n      setReplayFileName: (replayFileName) =>\n        this.setState({ replayFileName: replayFileName }),\n\n      setReplayData: (replayData) => this.setState({ replayData: replayData }),\n\n      setSelectedTags: (selectedTags) =>\n        this.setState({ selectedTags: selectedTags }),\n\n      setNotes: (notes) => this.setState({ notes: notes }),\n\n      resetAndDisableForm: () =>\n        this.setState({\n          failedToLoadReplay: false,\n          replayId: \"\",\n          selectedTags: [],\n          notes: \"\",\n          formDisabled: true,\n        }),\n\n      submitTaggedReplay: () => {\n        this.setState({\n          formDisabled: true,\n          submittingReplay: true,\n        });\n        Guy.submitTaggedReplay({\n          replayId: this.state.replayId,\n          replayData: this.state.replayData,\n          selectedTags: this.state.selectedTags,\n          notes: this.state.notes,\n        });\n      },\n    };\n  }\n\n  componentDidMount() {\n    Guy.onReplayLoadedListeners.push(this);\n    Guy.onReplayUpdatedListeners.push(this);\n  }\n\n  componentWillUnmount() {\n    Guy.onReplayLoadedListeners.splice(\n      Guy.onReplayLoadedListeners.indexOf(this),\n      1\n    );\n    Guy.onReplayUpdatedListeners.splice(\n      Guy.onReplayUpdatedListeners.indexOf(this),\n      1\n    );\n  }\n\n  onReplayLoaded({ replayId, replayFileName, selectedTags, notes, force }) {\n    if (!force && this.state.replayId !== replayId) {\n      this.setState({\n        formDisabled: true,\n        submittingReplay: false,\n        failedToLoadReplay: true,\n        replayId: \"\",\n        selectedTags: [],\n        notes: \"\",\n      });\n      return;\n    }\n\n    this.setState({\n      formDisabled: false,\n      submittingReplay: false,\n      failedToLoadReplay: false,\n      replayFileName: replayFileName || this.state.replayFileName,\n      selectedTags: selectedTags,\n      notes: notes,\n    });\n  }\n\n  onReplayUpdated({ success, replayId }) {\n    this.setState({ submittingReplay: false });\n\n    if (this.state.replayId === replayId) {\n      this.setState({ failedToTagReplay: !success, formDisabled: false });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <SubmitReplayForm tags={EXAMPLE_TAGS} {...this.state} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}