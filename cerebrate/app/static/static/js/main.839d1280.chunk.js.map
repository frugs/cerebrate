{"version":3,"sources":["TagUtils.js","SelectTagsInput.js","Guy.js","ReplaySelector.js","SelectPlayerAndOpponentInput.js","ReplayDateFormGroup.js","SubmitReplayForm.js","CerebrateNavbar.js","ReplayTagTree.js","App.js","serviceWorker.js","index.js"],"names":["TAG_PREFIXES","TAG_INTENTS","Intent","SUCCESS","DANGER","PRIMARY","TagUtils","extractPrefix","tag","prefix","indexOf","removePrefix","slice","length","getTagIntent","i","SelectTagsInput","props","tagPrefix","this","disabled","tagIntent","tags","selectedTags","setSelectedTags","createNewItemRenderer","query","active","handleClick","onClick","text","key","itemRenderer","item","modifiers","matchesPredicate","itemPredicate","index","exactMatch","includes","toLocaleLowerCase","initialContent","items","selectedItems","filter","createNewItemFromQuery","onItemSelect","push","resetOnSelect","tagRenderer","tagInputProps","onRemove","valueAsString","value","splice","tagProps","intent","openOnKeyDown","fill","placeholder","React","Component","EXAMPLE_TAGS","debugFunc","args","console","log","sleep","ms","a","Promise","resolve","setTimeout","selectReplayDebugFunc","replayId","Guy","onReplayLoadedListeners","forEach","listener","onReplayLoaded","replayTimestamp","teams","playerTeam","opponentTeam","replayFileName","notes","force","selectMostRecentReplayDebugFunc","Math","floor","Date","now","selectPlayerOpponentDebugFunc","updateReplayInfoDebugFunc","onReplayUpdatedListeners","onReplayUpdated","success","fetchTagFrequencyTableDebugFunc","filterTags","map","frequency","selectReplay","self","selectMostRecentReplay","selectPlayerOpponent","updateReplayInfo","fetchTagFrequencyTable","window","replayLoaded","payload","replayUpdated","ReplaySelector","state","valid","setReplayId","setReplayFileName","setReplayData","resetAndDisableForm","other","className","onInputChange","event","path","target","files","file","setState","split","pop","getFilename","hashReader","FileReader","addEventListener","data","result","hash","CryptoJS","SHA256","lib","WordArray","create","toString","dataReader","replayData","readAsDataURL","readAsArrayBuffer","inputProps","accept","SelectPlayerAndOpponentInput","setPlayerTeam","setOpponentTeam","disableForm","choice","parseInt","currentTarget","inverseChoice","formDisabled","label","iconProps","options","concat","team","onChange","onPlayerSelected","onOpponentSelected","formatDate","timestamp","date","toLocaleDateString","toLocaleTimeString","ReplayDateFormGroup","SubmitReplayForm","submittingReplay","setNotes","failedToTagReplay","failedToLoadReplay","helperText","loading","icon","IconNames","TAG","CerebrateNavbar","navbarTabId","Group","Heading","ReplayTagTree","handleNodeCollapse","nodeData","isExpanded","handleNodeExpand","generateContents","childNodes","contents","tagFrequencyTable","id","Classes","TREE_NODE_ICON","tagInfo","secondaryLabel","onNodeExpand","onNodeCollapse","App","allTags","entry","interactive","elevation","Elevation","TWO","animate","large","selectedTabId","newTabId","renderActiveTabPanelOnly","title","panel","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.839d1280.chunk.js","sourcesContent":["import { Intent } from \"@blueprintjs/core\";\n\nconst TAG_PREFIXES = [\"player\", \"opponent\", \"game\"];\n\nconst PREFIX_DELEMITER = \":\";\n\nconst TAG_INTENTS = [Intent.SUCCESS, Intent.DANGER, Intent.PRIMARY];\n\nconst TagUtils = {\n  extractPrefix(tag) {\n    for (const prefix of TAG_PREFIXES) {\n      if (tag.indexOf(prefix) === 0) {\n        return prefix;\n      }\n    }\n\n    return null;\n  },\n\n  removePrefix(tag) {\n    for (const prefix of TAG_PREFIXES) {\n      if (tag.indexOf(prefix) !== 0) {\n        continue;\n      }\n\n      return tag.slice(prefix.length + PREFIX_DELEMITER.length);\n    }\n  },\n\n  getTagIntent(tag) {\n    for (let i = 0; i < TAG_PREFIXES.length && TAG_INTENTS.length; i++) {\n      if (tag.indexOf(TAG_PREFIXES[i]) === 0) {\n        return TAG_INTENTS[i];\n      }\n    }\n\n    return null;\n  },\n};\n\nexport default TagUtils;\n","import React from \"react\";\nimport { MenuItem } from \"@blueprintjs/core\";\nimport { MultiSelect } from \"@blueprintjs/select\";\n\nimport TagUtils from \"./TagUtils\";\n\nclass SelectTagsInput extends React.Component {\n  constructor(props) {\n    super(props);\n    const { tagPrefix } = props;\n    this.tagPrefix = tagPrefix;\n  }\n\n  render() {\n    const {\n      disabled,\n      tagIntent,\n      tags,\n      selectedTags,\n      setSelectedTags,\n    } = this.props;\n\n    return (\n      <MultiSelect\n        createNewItemRenderer={(query, active, handleClick) => {\n          return (\n            <MenuItem\n              active={active}\n              onClick={handleClick}\n              text={query}\n              key={query}\n            />\n          );\n        }}\n        itemRenderer={(item, { modifiers, handleClick }) => {\n          if (!modifiers.matchesPredicate) {\n            return null;\n          }\n\n          return (\n            <MenuItem\n              active={modifiers.active}\n              onClick={handleClick}\n              text={TagUtils.removePrefix(item)}\n              key={item}\n            />\n          );\n        }}\n        itemPredicate={(query, item, index, exactMatch) =>\n          item.indexOf(this.tagPrefix) === 0 &&\n          !selectedTags.includes(item) &&\n          item.includes(query.toLocaleLowerCase(\"en-GB\"))\n        }\n        initialContent={null}\n        items={tags}\n        selectedItems={selectedTags.filter(\n          (tag) => tag.indexOf(this.tagPrefix) === 0\n        )}\n        createNewItemFromQuery={(query) => this.tagPrefix + query}\n        onItemSelect={(item) => {\n          if (!selectedTags.includes(item)) {\n            selectedTags.push(item);\n            setSelectedTags(selectedTags);\n          }\n        }}\n        resetOnSelect={true}\n        tagRenderer={(item) => TagUtils.removePrefix(item)}\n        tagInputProps={{\n          disabled: disabled,\n          onRemove: (valueAsString, index, value) => {\n            selectedTags.splice(\n              selectedTags.indexOf(this.tagPrefix + valueAsString),\n              1\n            );\n            setSelectedTags(selectedTags);\n          },\n          tagProps: { intent: tagIntent },\n        }}\n        openOnKeyDown={true}\n        fill={true}\n        placeholder={\"Tags...\"}\n      />\n    );\n  }\n}\n\nexport default SelectTagsInput;\n","/* eslint-disable no-restricted-globals */\n\nconst EXAMPLE_TAGS = [\n  \"player:terran\",\n  \"player:protoss\",\n  \"player:zerg\",\n  \"player:macro\",\n  \"player:all_in\",\n  \"player:2_base_all_in\",\n  \"player:mech\",\n  \"player:bio\",\n  \"player:stargate\",\n  \"player:twilight\",\n  \"player:dt\",\n  \"player:mass_pheonix\",\n  \"player:mass_void_ray\",\n  \"player:air_toss\",\n  \"player:cannon_rush\",\n  \"player:proxy_barracks\",\n  \"player:proxy_hatch\",\n  \"player:winner\",\n  \"player:loser\",\n\n  \"opponent:terran\",\n  \"opponent:protoss\",\n  \"opponent:zerg\",\n  \"opponent:macro\",\n  \"opponent:all_in\",\n  \"opponent:2_base_all_in\",\n  \"opponent:mech\",\n  \"opponent:bio\",\n  \"opponent:stargate\",\n  \"opponent:twilight\",\n  \"opponent:dt\",\n  \"opponent:mass_pheonix\",\n  \"opponent:mass_void_ray\",\n  \"opponent:air_toss\",\n  \"opponent:cannon_rush\",\n  \"opponent:proxy_barracks\",\n  \"opponent:proxy_hatch\",\n  \"opponent:winner\",\n  \"opponent:loser\",\n\n  \"game:zvp\",\n  \"game:zvt\",\n  \"game:zvz\",\n  \"game:tvz\",\n  \"game:tvp\",\n  \"game:tvt\",\n  \"game:pvt\",\n  \"game:pvz\",\n  \"game:pvp\",\n  \"game:short\",\n  \"game:long\",\n  \"game:basetrade\",\n];\n\nconst debugFunc = (...args) => console.log(args);\n\nconst sleep = async (ms) =>\n  await new Promise((resolve) => setTimeout(resolve, ms));\n\nconst selectReplayDebugFunc = async (...args) => {\n  debugFunc(args);\n\n  if (args.length < 1) {\n    return;\n  }\n\n  await sleep(200);\n\n  const { replayId } = args[0];\n\n  Guy.onReplayLoadedListeners.forEach((listener) =>\n    listener.onReplayLoaded({\n      replayId: replayId,\n      replayTimestamp: 1575909015,\n      teams: [\"BobTheZealot\", \"Jim Raynor\"],\n      playerTeam: null,\n      opponentTeam: null,\n      replayFileName: null,\n      selectedTags: [\"game:fake_tag\"],\n      notes: \"Some fake notes\",\n      force: false,\n    })\n  );\n};\n\nconst selectMostRecentReplayDebugFunc = async (...args) => {\n  debugFunc(args);\n\n  await sleep(200);\n\n  Guy.onReplayLoadedListeners.forEach((listener) =>\n    listener.onReplayLoaded({\n      replayId: \"SOME HASH VALUE\",\n      replayTimestamp: Math.floor(Date.now() / 1000),\n      teams: [\"Tassadar\", \"Artanis\"],\n      playerTeam: null,\n      opponentTeam: null,\n      replayFileName: null,\n      selectedTags: [\"game:fake_tag_2\"],\n      notes: \"This is the most recently played replay\",\n      force: true,\n    })\n  );\n};\n\nconst selectPlayerOpponentDebugFunc = async (...args) => {\n  debugFunc(args);\n\n  if (args.length < 1) {\n    return;\n  }\n\n  await sleep(200);\n\n  const { replayId, playerTeam, opponentTeam } = args[0];\n\n  Guy.onReplayLoadedListeners.forEach((listener) =>\n    listener.onReplayLoaded({\n      replayId: replayId,\n      replayTimestamp: 1575909015,\n      teams: [\"BobTheZealot\", \"Jim Raynor\"],\n      playerTeam: playerTeam,\n      opponentTeam: opponentTeam,\n      replayFileName: null,\n      selectedTags: [\"game:fake_tag\"],\n      notes: \"Some fake notes\",\n      force: false,\n    })\n  );\n};\n\nconst updateReplayInfoDebugFunc = async (...args) => {\n  debugFunc(args);\n\n  if (args.length < 1) {\n    return;\n  }\n\n  const { replayId } = args[0];\n\n  await sleep(500);\n\n  Guy.onReplayUpdatedListeners.forEach((listener) =>\n    listener.onReplayUpdated({\n      success: true,\n      replayId: replayId,\n    })\n  );\n};\n\nconst fetchTagFrequencyTableDebugFunc = async (...args) => {\n  debugFunc(args);\n\n  if (args.length < 1) {\n    return null;\n  }\n\n  const filterTags = args[0];\n\n  return EXAMPLE_TAGS.filter((tag) => !filterTags.includes(tag)).map((tag) => ({\n    tag: tag,\n    frequency: 1,\n  }));\n};\n\nconst Guy = {\n  selectReplay: (...args) =>\n    ((self && self.selectReplay) || selectReplayDebugFunc)(...args),\n\n  selectMostRecentReplay: (...args) =>\n    ((self && self.selectMostRecentReplay) || selectMostRecentReplayDebugFunc)(\n      ...args\n    ),\n\n  selectPlayerOpponent: (...args) =>\n    ((self && self.selectPlayerOpponent) || selectPlayerOpponentDebugFunc)(\n      ...args\n    ),\n\n  updateReplayInfo: (...args) =>\n    ((self && self.updateReplayInfo) || updateReplayInfoDebugFunc)(...args),\n\n  fetchTagFrequencyTable: (...args) =>\n    ((self && self.fetchTagFrequencyTable) || fetchTagFrequencyTableDebugFunc)(\n      ...args\n    ),\n\n  onReplayLoadedListeners: [],\n  onReplayUpdatedListeners: [],\n};\n\nwindow.replayLoaded = async (payload) => {\n  Guy.onReplayLoadedListeners.forEach((listener) =>\n    listener.onReplayLoaded(payload)\n  );\n};\n\n// eslint-disable-next-line no-restricted-globals\nwindow.replayUpdated = async (payload) => {\n  await sleep(500);\n  Guy.onReplayUpdatedListeners.forEach((listener) =>\n    listener.onReplayUpdated(payload)\n  );\n};\n\nexport default Guy;\n","import React from \"react\";\nimport { Button, FileInput } from \"@blueprintjs/core\";\nimport CryptoJS from \"crypto-js/crypto-js\";\nimport \"crypto-js/lib-typedarrays\";\nimport Guy from \"./Guy\";\n\nimport \"./ReplaySelector.css\";\n\nconst REPLAY_FILE_PLACEHOLDER_TEXT = \"Choose replay file...\";\n\nconst getFilename = (path) => path.split(\"\\\\\").pop().split(\"/\").pop();\n\nclass ReplaySelector extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      valid: true,\n      disabled: false,\n    };\n  }\n\n  render() {\n    const {\n      replayFileName,\n      setReplayId,\n      setReplayFileName,\n      setReplayData,\n      resetAndDisableForm,\n      ...other\n    } = this.props;\n\n    return (\n      <div className={\"ReplaySelector-container\"}>\n        <FileInput\n          disabled={this.state.disabled}\n          text={replayFileName || REPLAY_FILE_PLACEHOLDER_TEXT}\n          onInputChange={(event) => {\n            const path = event.target.value;\n            if (!path || !event.target.files) {\n              return;\n            }\n\n            const file = event.target.files[0];\n\n            this.setState({ disabled: true });\n            setReplayFileName(getFilename(path));\n            resetAndDisableForm();\n\n            const hashReader = new FileReader();\n            hashReader.addEventListener(\"load\", (event) => {\n              const data = event.target.result;\n              const hash = CryptoJS.SHA256(\n                CryptoJS.lib.WordArray.create(data)\n              ).toString();\n              setReplayId(hash);\n\n              const dataReader = new FileReader();\n              dataReader.addEventListener(\"load\", (event) => {\n                const data = event.target.result;\n                setReplayData(data);\n\n                this.setState({ disabled: false });\n                Guy.selectReplay({ replayId: hash, replayData: data });\n              });\n              dataReader.readAsDataURL(file);\n            });\n            hashReader.readAsArrayBuffer(file);\n          }}\n          inputProps={{ accept: \".sc2replay\" }}\n          {...other}\n        />\n        <Button\n          className={\"ReplaySelector-button\"}\n          text={\"Most recent replay\"}\n          onClick={(event) => {\n            resetAndDisableForm();\n            Guy.selectMostRecentReplay();\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default ReplaySelector;\n","import React from \"react\";\nimport { FormGroup, HTMLSelect, Intent } from \"@blueprintjs/core\";\n\nimport \"./SelectPlayerandOpponentInput.css\";\n\nimport Guy from \"./Guy\";\n\nexport class SelectPlayerAndOpponentInput extends React.Component {\n  onPlayerSelected(event) {\n    let {\n      replayId,\n      teams,\n      setPlayerTeam,\n      setOpponentTeam,\n      disableForm,\n    } = this.props;\n    let choice = parseInt(event.currentTarget.value);\n    if (choice < 0) {\n      setPlayerTeam(null);\n      return;\n    }\n\n    setPlayerTeam(choice);\n    let playerTeam = choice;\n\n    let opponentTeam = null;\n    if (teams.length === 2) {\n      let inverseChoice = choice === 0 ? 1 : 0;\n      setOpponentTeam(inverseChoice);\n      opponentTeam = inverseChoice;\n    }\n\n    disableForm();\n\n    Guy.selectPlayerOpponent({\n      replayId: replayId,\n      playerTeam: playerTeam,\n      opponentTeam: opponentTeam,\n    });\n  }\n\n  onOpponentSelected(event) {\n    let {\n      replayId,\n      teams,\n      setPlayerTeam,\n      setOpponentTeam,\n      disableForm,\n    } = this.props;\n    let choice = parseInt(event.currentTarget.value);\n    if (choice < 0) {\n      setOpponentTeam(null);\n      return;\n    }\n\n    setOpponentTeam(choice);\n    let opponentTeam = choice;\n\n    let playerTeam = null;\n    if (teams.length === 2) {\n      let inverseChoice = choice === 0 ? 1 : 0;\n      setPlayerTeam(inverseChoice);\n      playerTeam = inverseChoice;\n    }\n\n    disableForm();\n\n    Guy.selectPlayerOpponent({\n      replayId: replayId,\n      playerTeam: playerTeam,\n      opponentTeam: opponentTeam,\n    });\n  }\n\n  render() {\n    let { formDisabled, teams, playerTeam, opponentTeam } = this.props;\n    return (\n      <div className={\"SelectPlayerAndOpponentInput-container\"}>\n        <FormGroup\n          className={\n            \"SelectPlayerAndOpponentInput-form-group SelectPlayerAndOpponentInput-form-group-player\"\n          }\n          label={\"Player\"}\n        >\n          <HTMLSelect\n            disabled={formDisabled}\n            fill={true}\n            iconProps={{ intent: Intent.SUCCESS }}\n            options={[{ label: \"Choose player...\", value: \"-1\" }].concat(\n              teams.map((team, index) => {\n                return { label: team, value: index.toString() };\n              })\n            )}\n            value={playerTeam !== null ? playerTeam.toString() : \"-1\"}\n            onChange={(event) => this.onPlayerSelected(event)}\n          />\n        </FormGroup>\n        <FormGroup\n          className={\"SelectPlayerAndOpponentInput-form-group\"}\n          label={\"Opponent\"}\n        >\n          <HTMLSelect\n            disabled={formDisabled}\n            fill={true}\n            iconProps={{ intent: Intent.DANGER }}\n            options={[{ label: \"Choose opponent...\", value: \"-1\" }].concat(\n              teams.map((team, index) => {\n                return { label: team, value: index.toString() };\n              })\n            )}\n            value={opponentTeam !== null ? opponentTeam.toString() : \"-1\"}\n            onChange={(event) => this.onOpponentSelected(event)}\n          />\n        </FormGroup>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { FormGroup, InputGroup } from \"@blueprintjs/core\";\n\nfunction formatDate(timestamp) {\n  let date = new Date(timestamp * 1000);\n  return date.toLocaleDateString() + \" \" + date.toLocaleTimeString();\n}\n\nexport function ReplayDateFormGroup({ replayTimestamp }) {\n  return (\n    <FormGroup label=\"Replay date\">\n      <InputGroup\n        disabled={true}\n        fill={true}\n        value={replayTimestamp && formatDate(replayTimestamp)}\n      />\n    </FormGroup>\n  );\n}\n","import React from \"react\";\n\nimport {\n  Button,\n  FormGroup,\n  InputGroup,\n  Intent,\n  TextArea,\n} from \"@blueprintjs/core\";\n\nimport { IconNames } from \"@blueprintjs/icons\";\n\nimport SelectTagsInput from \"./SelectTagsInput\";\nimport ReplaySelector from \"./ReplaySelector\";\nimport { SelectPlayerAndOpponentInput } from \"./SelectPlayerAndOpponentInput\";\nimport { ReplayDateFormGroup } from \"./ReplayDateFormGroup\";\n\nfunction SubmitReplayForm(props) {\n  const {\n    notes,\n    submittingReplay,\n    setNotes,\n    updateReplayInfo,\n    ...other\n  } = props;\n  const {\n    replayId,\n    formDisabled,\n    playerTeam,\n    opponentTeam,\n    failedToTagReplay,\n    failedToLoadReplay,\n  } = other;\n  return (\n    <div>\n      <br />\n      <FormGroup label=\"Replay ID\">\n        <InputGroup disabled={true} fill={true} value={replayId} />\n      </FormGroup>\n      <FormGroup\n        label=\"Replay file\"\n        intent={failedToLoadReplay ? Intent.DANGER : null}\n        helperText={\n          failedToLoadReplay\n            ? \"Failed to load replay, please select another or try again.\"\n            : null\n        }\n      >\n        <ReplaySelector fill={true} {...other} />\n      </FormGroup>\n      <ReplayDateFormGroup {...other} />\n      <SelectPlayerAndOpponentInput {...other} />\n      <FormGroup label=\"Player tags\">\n        <SelectTagsInput\n          {...other}\n          disabled={formDisabled || playerTeam === null}\n          tagPrefix={\"player:\"}\n          tagIntent={Intent.SUCCESS}\n        />\n      </FormGroup>\n      <FormGroup label=\"Opponent tags\">\n        <SelectTagsInput\n          {...other}\n          disabled={formDisabled || opponentTeam === null}\n          tagPrefix={\"opponent:\"}\n          tagIntent={Intent.DANGER}\n        />\n      </FormGroup>\n      <FormGroup label=\"Game tags\">\n        <SelectTagsInput\n          {...other}\n          disabled={formDisabled}\n          tagPrefix={\"game:\"}\n          tagIntent={Intent.PRIMARY}\n        />\n      </FormGroup>\n      <FormGroup label=\"Notes\">\n        <TextArea\n          fill={true}\n          disabled={formDisabled}\n          value={notes}\n          onChange={(event) => setNotes(event.target.value)}\n        />\n      </FormGroup>\n      <FormGroup\n        intent={failedToTagReplay ? Intent.DANGER : null}\n        helperText={\n          failedToTagReplay\n            ? \"Failed to save tags, please select another replay or try again.\"\n            : null\n        }\n      >\n        <Button\n          fill={true}\n          loading={submittingReplay}\n          intent={Intent.SUCCESS}\n          disabled={\n            formDisabled || playerTeam === null || opponentTeam === null\n          }\n          onClick={updateReplayInfo}\n          icon={IconNames.TAG}\n        >\n          Save tags\n        </Button>\n      </FormGroup>\n    </div>\n  );\n}\n\nexport default SubmitReplayForm;\n","import React from \"react\";\nimport { Navbar } from \"@blueprintjs/core\";\n\nimport \"./CerebrateNavbar.scss\";\n\nexport class CerebrateNavbar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      navbarTabId: \"Home\",\n    };\n  }\n\n  render() {\n    return (\n      <Navbar className={\"CerebrateNavbar-navbar\"}>\n        <Navbar.Group>\n          <Navbar.Heading className={\"CerebrateNavbar-navbar-heading\"}>\n            <div>\n              <div className={\"CerebrateNavbar-logo\"}>Cerebrate</div>\n              <em className={\"CerebrateNavbar-logo-subtitle\"}>\n                A StarCraft II Replay Manager\n              </em>\n            </div>\n          </Navbar.Heading>\n        </Navbar.Group>\n      </Navbar>\n    );\n  }\n}\n","import React from \"react\";\nimport { Classes, Icon, Tree } from \"@blueprintjs/core\";\n\nimport Guy from \"./Guy\";\nimport TagUtils from \"./TagUtils\";\n\nimport \"./ReplayTagTree.scss\";\n\nexport class ReplayTagTree extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      contents: [],\n    };\n  }\n\n  componentDidMount() {\n    (async () => {\n      this.setState({\n        contents: await this.generateContents([]),\n      });\n    })();\n  }\n\n  async generateContents(filterTags) {\n    const tagFrequencyTable = await Guy.fetchTagFrequencyTable(filterTags);\n\n    return [\n      {\n        id: 0,\n        icon: <Icon icon=\"folder-open\" className={Classes.TREE_NODE_ICON} />,\n        label: \"Replays\",\n        childNodes: [\n          {\n            id: 0,\n            label: (\n              <span>\n                <em>Loading...</em>\n              </span>\n            ),\n            disabled: true,\n          },\n        ],\n      },\n    ].concat(\n      tagFrequencyTable.map((tagInfo, index) => ({\n        id: index + 1,\n        filterTags: filterTags.concat(tagInfo.tag),\n        icon: (\n          <Icon\n            icon=\"tag\"\n            intent={TagUtils.getTagIntent(tagInfo.tag)}\n            className={Classes.TREE_NODE_ICON}\n          />\n        ),\n        label: (\n          <div>\n            <span\n              className={\n                \"ReplayTagTree-tree-node-label-\" +\n                TagUtils.extractPrefix(tagInfo.tag) +\n                \"-tag\"\n              }\n            >\n              <span className=\"ReplayTagTree-tree-node-label-tag-prefix\">\n                {TagUtils.extractPrefix(tagInfo.tag)}:&nbsp;\n              </span>\n              <span className=\"ReplayTagTree-tree-node-label-tag-name\">\n                <strong>{TagUtils.removePrefix(tagInfo.tag)}</strong>\n              </span>\n            </span>\n          </div>\n        ),\n        secondaryLabel: (\n          <span className={\"ReplayTagTree-tree-node-label-tag-freq\"}>\n            <em>{\"Replay(s): \" + tagInfo.frequency} </em>\n          </span>\n        ),\n        childNodes: [\n          {\n            id: 0,\n            label: (\n              <span>\n                <em>Loading...</em>\n              </span>\n            ),\n            disabled: true,\n          },\n        ],\n      }))\n    );\n  }\n\n  handleNodeCollapse = (nodeData) => {\n    nodeData.isExpanded = false;\n    this.setState(this.state);\n  };\n\n  handleNodeExpand = (nodeData) => {\n    nodeData.isExpanded = true;\n    this.setState(this.state);\n\n    if (nodeData.label === \"Replays\") {\n      // TODO: implement this\n    } else {\n      (async () => {\n        nodeData.childNodes = await this.generateContents(nodeData.filterTags);\n        this.setState(this.state);\n      })();\n    }\n  };\n\n  render() {\n    return (\n      <Tree\n        {...this.props}\n        contents={this.state.contents}\n        onNodeExpand={this.handleNodeExpand}\n        onNodeCollapse={this.handleNodeCollapse}\n      />\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.scss\";\nimport SubmitReplayForm from \"./SubmitReplayForm\";\nimport Guy from \"./Guy\";\nimport { CerebrateNavbar } from \"./CerebrateNavbar\";\nimport { Card, Elevation, Tab, Tabs } from \"@blueprintjs/core\";\nimport { ReplayTagTree } from \"./ReplayTagTree\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      replayId: \"\",\n      replayFileName: \"\",\n      replayTimestamp: null,\n      replayData: \"\",\n      teams: [],\n      playerTeam: null,\n      opponentTeam: null,\n      selectedTags: [],\n      notes: \"\",\n      formDisabled: true,\n      failedToLoadReplay: false,\n      failedToTagReplay: false,\n      submittingReplay: false,\n      navbarTabId: \"form\",\n      allTags: [],\n\n      setReplayId: (replayId) => this.setState({ replayId: replayId }),\n\n      setReplayFileName: (replayFileName) =>\n        this.setState({ replayFileName: replayFileName }),\n\n      setReplayData: (replayData) => this.setState({ replayData: replayData }),\n\n      setPlayerTeam: (index) => this.setState({ playerTeam: index }),\n\n      setOpponentTeam: (index) => this.setState({ opponentTeam: index }),\n\n      setSelectedTags: (selectedTags) =>\n        this.setState({ selectedTags: selectedTags }),\n\n      setNotes: (notes) => this.setState({ notes: notes }),\n\n      resetAndDisableForm: () =>\n        this.setState({\n          failedToLoadReplay: false,\n          replayId: \"\",\n          replayTimestamp: null,\n          teams: [],\n          playerTeam: null,\n          opponentTeam: null,\n          selectedTags: [],\n          notes: \"\",\n          formDisabled: true,\n        }),\n\n      disableForm: () => this.setState({ formDisabled: true }),\n\n      updateReplayInfo: () => {\n        this.setState({\n          formDisabled: true,\n          submittingReplay: true,\n        });\n        Guy.updateReplayInfo({\n          replayId: this.state.replayId,\n          replayData: this.state.replayData,\n          selectedTags: this.state.selectedTags,\n          playerTeam: this.state.playerTeam,\n          opponentTeam: this.state.opponentTeam,\n          notes: this.state.notes,\n        });\n      },\n    };\n  }\n\n  componentDidMount() {\n    Guy.onReplayLoadedListeners.push(this);\n    Guy.onReplayUpdatedListeners.push(this);\n\n    (async () => {\n      const tagFrequencyTable = await Guy.fetchTagFrequencyTable([]);\n      this.setState({ allTags: tagFrequencyTable.map((entry) => entry.tag) });\n    })();\n  }\n\n  componentWillUnmount() {\n    Guy.onReplayLoadedListeners.splice(\n      Guy.onReplayLoadedListeners.indexOf(this),\n      1\n    );\n    Guy.onReplayUpdatedListeners.splice(\n      Guy.onReplayUpdatedListeners.indexOf(this),\n      1\n    );\n  }\n\n  onReplayLoaded({\n    replayId,\n    replayFileName,\n    replayData,\n    replayTimestamp,\n    teams,\n    playerTeam,\n    opponentTeam,\n    selectedTags,\n    notes,\n    force,\n  }) {\n    if (!force && this.state.replayId !== replayId) {\n      this.setState({\n        formDisabled: true,\n        submittingReplay: false,\n        failedToLoadReplay: true,\n        replayId: \"\",\n        teams: [],\n        playerTeam: null,\n        opponentTeam: null,\n        replayTimestamp: null,\n        selectedTags: [],\n        notes: \"\",\n      });\n      return;\n    }\n\n    this.setState({\n      replayId: replayId,\n      replayData: replayData || this.state.replayData,\n      formDisabled: false,\n      submittingReplay: false,\n      failedToLoadReplay: false,\n      replayTimestamp: replayTimestamp,\n      teams: teams,\n      playerTeam: playerTeam,\n      opponentTeam: opponentTeam,\n      replayFileName: replayFileName || this.state.replayFileName,\n      selectedTags: selectedTags,\n      notes: notes,\n    });\n  }\n\n  onReplayUpdated({ success, replayId }) {\n    this.setState({ submittingReplay: false });\n\n    if (this.state.replayId === replayId) {\n      this.setState({ failedToTagReplay: !success, formDisabled: false });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Card\n          interactive={true}\n          elevation={Elevation.TWO}\n          className={\"App-card\"}\n        >\n          <CerebrateNavbar />\n          <div className={\"App-break\"}>\n            <br />\n          </div>\n          <Tabs\n            animate={true}\n            id=\"navbar\"\n            large={true}\n            selectedTabId={this.state.navbarTabId}\n            onChange={(newTabId) => this.setState({ navbarTabId: newTabId })}\n            renderActiveTabPanelOnly={true}\n          >\n            <Tab\n              id=\"form\"\n              title=\"Replay Details\"\n              panel={\n                <SubmitReplayForm tags={this.state.allTags} {...this.state} />\n              }\n            />\n            <Tab\n              id=\"search\"\n              title=\"Find Replays\"\n              panel={<ReplayTagTree {...this.state} />}\n            />\n          </Tabs>\n        </Card>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}